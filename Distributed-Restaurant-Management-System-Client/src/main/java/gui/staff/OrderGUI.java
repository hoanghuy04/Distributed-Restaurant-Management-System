/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package gui.staff;

import bus.*;
import bus.request.ClientCallback;
import com.formdev.flatlaf.FlatClientProperties;
import common.*;
import dto.CartDTO;
import dto.ItemCartDTO;
import model.*;
import gui.menu.Application;

import javax.swing.*;

import gui.FormLoad;
import gui.custom.RoundedButton;
import gui.main.LoginGUI;

import java.rmi.RemoteException;
import java.rmi.server.UnicastRemoteObject;
import java.util.*;
import java.awt.Component;
import java.awt.Font;
import java.awt.event.KeyEvent;
import java.time.LocalDateTime;
import java.util.stream.Collectors;

import model.enums.CustomerLevelEnum;
import model.enums.OrderStatusEnum;
import model.enums.PaymentMethodEnum;
import model.enums.PaymentStatusEnum;
import model.enums.TableStatusEnum;
import raven.toast.Notifications;
import util.*;

/**
 * @author Trần Ngọc Huyền.
 */
public class OrderGUI extends JPanel implements ClientCallback {

    private Set<String> set;
    /**
     * Creates new form OrderGUI
     */
    private CategoryBUS categoryBUS;
    private ItemBUS itemBUS;
    private FloorBUS floorBUS;
    private TableBUS tableBUS;
    private CustomerBUS customerBUS;
    private OrderBUS orderBUS;
    private OrderDetailBUS orderDetailBUS;
    private EmployeeBUS employeeBUS;
    private PromotionBUS promotionBUS;
    private ItemToppingBUS itemToppingBUS;
    private ToppingBUS toppingBUS;
    private CustomerEntity dfCus;
    private TableEntity table;
    private MainGUI mainGUI;
    private Application app;
    private double totalPrice = 0;
    private double itemDiscount = 0;
    private double totalPaid = 0;
    private double orderDiscount = 0;
    private double deposit = 0;
    private double stt = 1;

    private List<TableEntity> combinedTables;
    public CartDTO cartDTO;
    private OrderEntity o;

    public OrderGUI(Application app, MainGUI mainGUI) throws Exception {
        UnicastRemoteObject.exportObject(this, 0);
        this.app = app;
        cartDTO = new CartDTO();
        this.categoryBUS = FormLoad.categoryBUS;
        this.itemBUS = FormLoad.itemBUS;
        this.floorBUS = FormLoad.floorBUS;
        this.tableBUS = FormLoad.tableBUS;
        this.customerBUS = FormLoad.customerBUS;
        this.orderBUS = FormLoad.orderBUS;
        this.orderDetailBUS = FormLoad.orderDetailBUS;
        this.employeeBUS = FormLoad.employeeBUS;
        this.promotionBUS = FormLoad.promotionBUS;
        this.itemToppingBUS = FormLoad.itemToppingBUS;
        this.toppingBUS = FormLoad.toppingBUS;
        this.mainGUI = mainGUI;

        dfCus = customerBUS.getAllEntities().get(0);
        this.combinedTables = new ArrayList<>();

        this.set = new HashSet<>();

        initComponents();
        setUI();
        addTabCategory();
        cbbFilter.setSelectedIndex(1);
        loadFloors();
        loadPaymentCombobox();
    }

    public TableEntity getTable() {
        return table;
    }

    public void setTable(TableEntity table) {
        this.table = table;
        cbbTable.setSelectedItem(table.getName());
        cbbFloor.setSelectedItem(table.getFloor().getName());
    }

    public JPanel getPanelOrderDetails() {
        return panelOrderDetails;
    }

    public void setPanelOrderDetails(JPanel panelOrderDetails) {
        this.panelOrderDetails = panelOrderDetails;
    }

    public double getTotalPrice() {
        return totalPrice;
    }

    public void setTotalPrice(double totalPrice) {
        this.totalPrice = totalPrice;
    }

    public List<TableEntity> getCombinedTables() {
        return combinedTables;
    }

    public void setCombinedTables(List<TableEntity> combinedTables) {
        this.combinedTables = combinedTables;
    }

    public CartDTO getCartDTO() {
        return cartDTO;
    }

    public void setCartDTO(CartDTO cartDTO) {
        this.cartDTO = cartDTO;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new JPanel();
        jPanel3 = new JPanel();
        jPanel4 = new JPanel();
        cbbFloor = new JComboBox<>();
        filler2 = new Box.Filler(new java.awt.Dimension(20, 0), new java.awt.Dimension(20, 0), new java.awt.Dimension(20, 32767));
        cbbTable = new gui.custom.ComboBoxMultiSelection();
        filler1 = new Box.Filler(new java.awt.Dimension(20, 0), new java.awt.Dimension(20, 0), new java.awt.Dimension(20, 32767));
        txtSearchCustomer = new gui.custom.RoundedTextField();
        filler3 = new Box.Filler(new java.awt.Dimension(20, 0), new java.awt.Dimension(20, 0), new java.awt.Dimension(20, 32767));
        txtNumberOfCustomer = new gui.custom.RoundedTextField();
        jLabel2 = new JLabel();
        filler4 = new Box.Filler(new java.awt.Dimension(20, 0), new java.awt.Dimension(20, 0), new java.awt.Dimension(20, 32767));
        jPanel6 = new JPanel();
        panelCustomerInfo = new JPanel();
        jLabel4 = new JLabel();
        jPanel8 = new JPanel();
        jLabel5 = new JLabel();
        lblCusName = new gui.custom.RoundedTextField();
        jPanel17 = new JPanel();
        jLabel13 = new JLabel();
        lblCusLevel = new gui.custom.RoundedTextField();
        jPanel19 = new JPanel();
        jLabel15 = new JLabel();
        lblRewardedPoint = new gui.custom.RoundedTextField();
        jPanel15 = new JPanel();
        jPanel10 = new JPanel();
        lblthanhtien = new JLabel();
        jLabel9 = new JLabel();
        lblSTT = new JLabel();
        lblName = new JLabel();
        jLabel10 = new JLabel();
        lblthanhtien1 = new JLabel();
        scrollOrderDetails = new JScrollPane();
        panelOrderDetails = new JPanel();
        panelOrderInfo = new JPanel();
        jLabel6 = new JLabel();
        jPanel9 = new JPanel();
        jLabel7 = new JLabel();
        lblDeposit = new gui.custom.RoundedTextField();
        jPanel18 = new JPanel();
        jLabel14 = new JLabel();
        lblTotalPrice = new gui.custom.RoundedTextField();
        jPanel21 = new JPanel();
        jLabel17 = new JLabel();
        lblItemDiscount = new gui.custom.RoundedTextField();
        jPanel24 = new JPanel();
        jLabel19 = new JLabel();
        lblTotalPaid = new gui.custom.RoundedTextField();
        jPanel25 = new JPanel();
        jLabel20 = new JLabel();
        lblGivenMoney = new gui.custom.RoundedTextField();
        pnBtn = new JPanel();
        btnExit = new RoundedButton();
        btnSave = new RoundedButton();
        btnPay = new RoundedButton();
        jPanel26 = new JPanel();
        jLabel21 = new JLabel();
        cbbPayment = new JComboBox<>();
        jPanel22 = new JPanel();
        jLabel18 = new JLabel();
        lblOrderDiscount = new gui.custom.RoundedTextField();
        jPanel27 = new JPanel();
        jLabel22 = new JLabel();
        lblRefund = new gui.custom.RoundedTextField();
        pnSuggest = new JPanel();
        jPanel5 = new JPanel();
        jPanel2 = new JPanel();
        jPanel7 = new JPanel();
        txtSearchItem = new JTextField();
        cbbFilter = new JComboBox<>();
        tabCategory = new JTabbedPane();
        jPanel11 = new JPanel();

        setMaximumSize(new java.awt.Dimension(1250, 1000));
        setMinimumSize(new java.awt.Dimension(1250, 900));
        setPreferredSize(new java.awt.Dimension(1250, 1000));
        setLayout(new java.awt.BorderLayout());

        jPanel1.setPreferredSize(new java.awt.Dimension(1250, 810));
        jPanel1.setRequestFocusEnabled(false);
        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setPreferredSize(new java.awt.Dimension(750, 770));
        jPanel3.setLayout(new java.awt.BorderLayout());

        jPanel4.setBackground(Constants.COLOR_BG);
        jPanel4.setPreferredSize(new java.awt.Dimension(0, 50));
        jPanel4.setLayout(new BoxLayout(jPanel4, BoxLayout.LINE_AXIS));

        cbbFloor.setFont(new Font("Segoe UI", 0, 16)); // NOI18N
        cbbFloor.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                try {
                    cbbFloorItemStateChanged(evt);
                } catch (Exception e) {
                    throw new RuntimeException(e);
                }
            }
        });
        jPanel4.add(cbbFloor);
        jPanel4.add(filler2);

        cbbTable.setFont(new Font("Segoe UI", 0, 18)); // NOI18N
        cbbTable.setPreferredSize(new java.awt.Dimension(250, 28));
        jPanel4.add(cbbTable);
        jPanel4.add(filler1);

        txtSearchCustomer.setFont(new Font("Segoe UI", 0, 16)); // NOI18N
        txtSearchCustomer.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(KeyEvent evt) {
                try {
                    txtSearchCustomerKeyReleased(evt);
                } catch (Exception e) {
                    throw new RuntimeException(e);
                }
            }
        });
        jPanel4.add(txtSearchCustomer);
        jPanel4.add(filler3);

        txtNumberOfCustomer.setHorizontalAlignment(JTextField.CENTER);
        txtNumberOfCustomer.setFont(new Font("Segoe UI", 0, 16)); // NOI18N
        txtNumberOfCustomer.setMaximumSize(new java.awt.Dimension(100, 50));
        txtNumberOfCustomer.setMinimumSize(new java.awt.Dimension(30, 50));
        txtNumberOfCustomer.setPreferredSize(new java.awt.Dimension(50, 50));
        jPanel4.add(txtNumberOfCustomer);

        jLabel2.setFont(new Font("Segoe UI", 0, 16)); // NOI18N
        jLabel2.setHorizontalAlignment(SwingConstants.CENTER);
        jLabel2.setIcon(new ImageIcon(getClass().getResource("/img/icon/png/icons8-user-48.png"))); // NOI18N
        jLabel2.setHorizontalTextPosition(SwingConstants.LEFT);
        jLabel2.setMaximumSize(new java.awt.Dimension(70, 70));
        jPanel4.add(jLabel2);
        jPanel4.add(filler4);

        jPanel3.add(jPanel4, java.awt.BorderLayout.NORTH);

        jPanel6.setBackground(Constants.COLOR_BG);
        jPanel6.setLayout(new java.awt.BorderLayout());

        panelCustomerInfo.setBackground(Constants.COLOR_BG);
        panelCustomerInfo.setPreferredSize(new java.awt.Dimension(756, 180));

        jLabel4.setFont(new Font("Segoe UI", 1, 24)); // NOI18N
        jLabel4.setForeground(Constants.COLOR_PRIMARY);
        jLabel4.setText("Thông tin khách hàng");

        jPanel8.setBackground(Constants.COLOR_BG);
        jPanel8.setPreferredSize(new java.awt.Dimension(505, 30));

        jLabel5.setFont(new Font("Segoe UI", 1, 20)); // NOI18N
        jLabel5.setForeground(Constants.COLOR_TEXT);
        jLabel5.setText("Họ tên: ");

        lblCusName.setEditable(false);
        lblCusName.setBorder(BorderFactory.createMatteBorder(1, 1, 1, 1, Constants.COLOR_BG));
        lblCusName.setFocusable(false);
        lblCusName.setFont(new Font("Segoe UI", 0, 18)); // NOI18N

        GroupLayout jPanel8Layout = new GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
                jPanel8Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel8Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jLabel5)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(lblCusName, GroupLayout.PREFERRED_SIZE, 236, GroupLayout.PREFERRED_SIZE)
                                .addContainerGap())
        );
        jPanel8Layout.setVerticalGroup(
                jPanel8Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel8Layout.createSequentialGroup()
                                .addGroup(jPanel8Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel5, GroupLayout.PREFERRED_SIZE, 30, GroupLayout.PREFERRED_SIZE)
                                        .addComponent(lblCusName, GroupLayout.PREFERRED_SIZE, 28, GroupLayout.PREFERRED_SIZE))
                                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel17.setBackground(Constants.COLOR_BG);
        jPanel17.setPreferredSize(new java.awt.Dimension(505, 30));

        jLabel13.setFont(new Font("Segoe UI", 1, 20)); // NOI18N
        jLabel13.setForeground(Constants.COLOR_TEXT);
        jLabel13.setText("Hạng thành viên");

        lblCusLevel.setEditable(false);
        lblCusLevel.setBorder(BorderFactory.createMatteBorder(1, 1, 1, 1, Constants.COLOR_BG));
        lblCusLevel.setFocusable(false);
        lblCusLevel.setFont(new Font("Segoe UI", 0, 18)); // NOI18N

        GroupLayout jPanel17Layout = new GroupLayout(jPanel17);
        jPanel17.setLayout(jPanel17Layout);
        jPanel17Layout.setHorizontalGroup(
                jPanel17Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel17Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jLabel13)
                                .addContainerGap(575, Short.MAX_VALUE))
                        .addGroup(jPanel17Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                .addGroup(GroupLayout.Alignment.TRAILING, jPanel17Layout.createSequentialGroup()
                                        .addGap(508, 508, 508)
                                        .addComponent(lblCusLevel, GroupLayout.DEFAULT_SIZE, 236, Short.MAX_VALUE)
                                        .addContainerGap()))
        );
        jPanel17Layout.setVerticalGroup(
                jPanel17Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel17Layout.createSequentialGroup()
                                .addComponent(jLabel13, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addContainerGap())
                        .addGroup(jPanel17Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel17Layout.createSequentialGroup()
                                        .addComponent(lblCusLevel, GroupLayout.PREFERRED_SIZE, 28, GroupLayout.PREFERRED_SIZE)
                                        .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        jPanel19.setBackground(Constants.COLOR_BG);
        jPanel19.setPreferredSize(new java.awt.Dimension(505, 30));

        jLabel15.setFont(new Font("Segoe UI", 1, 20)); // NOI18N
        jLabel15.setForeground(Constants.COLOR_TEXT);
        jLabel15.setText("Điểm thưởng");

        lblRewardedPoint.setEditable(false);
        lblRewardedPoint.setBorder(BorderFactory.createMatteBorder(1, 1, 1, 1, Constants.COLOR_BG));
        lblRewardedPoint.setFocusable(false);
        lblRewardedPoint.setFont(new Font("Segoe UI", 0, 18)); // NOI18N

        GroupLayout jPanel19Layout = new GroupLayout(jPanel19);
        jPanel19.setLayout(jPanel19Layout);
        jPanel19Layout.setHorizontalGroup(
                jPanel19Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel19Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jLabel15)
                                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(jPanel19Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                .addGroup(GroupLayout.Alignment.TRAILING, jPanel19Layout.createSequentialGroup()
                                        .addContainerGap(508, Short.MAX_VALUE)
                                        .addComponent(lblRewardedPoint, GroupLayout.PREFERRED_SIZE, 236, GroupLayout.PREFERRED_SIZE)
                                        .addContainerGap()))
        );
        jPanel19Layout.setVerticalGroup(
                jPanel19Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel15, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel19Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel19Layout.createSequentialGroup()
                                        .addComponent(lblRewardedPoint, GroupLayout.PREFERRED_SIZE, 28, GroupLayout.PREFERRED_SIZE)
                                        .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        GroupLayout panelCustomerInfoLayout = new GroupLayout(panelCustomerInfo);
        panelCustomerInfo.setLayout(panelCustomerInfoLayout);
        panelCustomerInfoLayout.setHorizontalGroup(
                panelCustomerInfoLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(panelCustomerInfoLayout.createSequentialGroup()
                                .addGroup(panelCustomerInfoLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                        .addComponent(jPanel8, GroupLayout.DEFAULT_SIZE, 750, Short.MAX_VALUE)
                                        .addGroup(panelCustomerInfoLayout.createSequentialGroup()
                                                .addComponent(jLabel4, GroupLayout.PREFERRED_SIZE, 256, GroupLayout.PREFERRED_SIZE)
                                                .addGap(0, 0, Short.MAX_VALUE))
                                        .addGroup(GroupLayout.Alignment.TRAILING, panelCustomerInfoLayout.createSequentialGroup()
                                                .addGap(0, 0, Short.MAX_VALUE)
                                                .addComponent(jPanel17, GroupLayout.PREFERRED_SIZE, 750, GroupLayout.PREFERRED_SIZE))
                                        .addComponent(jPanel19, GroupLayout.Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 750, Short.MAX_VALUE))
                                .addContainerGap())
        );
        panelCustomerInfoLayout.setVerticalGroup(
                panelCustomerInfoLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(panelCustomerInfoLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel4)
                                .addGap(12, 12, 12)
                                .addComponent(jPanel8, GroupLayout.PREFERRED_SIZE, 32, GroupLayout.PREFERRED_SIZE)
                                .addGap(8, 8, 8)
                                .addComponent(jPanel17, GroupLayout.PREFERRED_SIZE, 32, GroupLayout.PREFERRED_SIZE)
                                .addGap(8, 8, 8)
                                .addComponent(jPanel19, GroupLayout.PREFERRED_SIZE, 32, GroupLayout.PREFERRED_SIZE)
                                .addGap(8, 8, 8))
        );

        jPanel6.add(panelCustomerInfo, java.awt.BorderLayout.NORTH);

        jPanel15.setLayout(new java.awt.BorderLayout());

        jPanel10.setBackground(Constants.COLOR_BORDER);
        jPanel10.setBorder(BorderFactory.createMatteBorder(1, 1, 1, 1, Constants.COLOR_BORDER));
        jPanel10.setPreferredSize(new java.awt.Dimension(748, 50));

        lblthanhtien.setFont(new Font("Segoe UI", 1, 20)); // NOI18N
        lblthanhtien.setHorizontalAlignment(SwingConstants.CENTER);
        lblthanhtien.setText("Ghi chú");

        jLabel9.setFont(new Font("Segoe UI", 1, 20)); // NOI18N
        jLabel9.setHorizontalAlignment(SwingConstants.CENTER);
        jLabel9.setText("Đơn giá");

        lblSTT.setFont(new Font("Segoe UI", 1, 20)); // NOI18N
        lblSTT.setText("STT");

        lblName.setBackground(new java.awt.Color(255, 255, 255));
        lblName.setFont(new Font("Segoe UI", 1, 20)); // NOI18N
        lblName.setText("Tên");

        jLabel10.setFont(new Font("Segoe UI", 1, 20)); // NOI18N
        jLabel10.setText("SL");

        lblthanhtien1.setFont(new Font("Segoe UI", 1, 20)); // NOI18N
        lblthanhtien1.setText("Thành tiền");

        GroupLayout jPanel10Layout = new GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
                jPanel10Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel10Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(lblSTT, GroupLayout.PREFERRED_SIZE, 44, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(lblName, GroupLayout.PREFERRED_SIZE, 147, GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel10, GroupLayout.PREFERRED_SIZE, 37, GroupLayout.PREFERRED_SIZE)
                                .addGap(44, 44, 44)
                                .addComponent(jLabel9, GroupLayout.PREFERRED_SIZE, 91, GroupLayout.PREFERRED_SIZE)
                                .addGap(22, 22, 22)
                                .addComponent(lblthanhtien1)
                                .addGap(30, 30, 30)
                                .addComponent(lblthanhtien, GroupLayout.PREFERRED_SIZE, 139, GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(56, Short.MAX_VALUE))
        );
        jPanel10Layout.setVerticalGroup(
                jPanel10Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addComponent(lblSTT, GroupLayout.DEFAULT_SIZE, 48, Short.MAX_VALUE)
                        .addComponent(lblName, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel10, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel9, GroupLayout.Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblthanhtien1, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblthanhtien, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jPanel15.add(jPanel10, java.awt.BorderLayout.PAGE_START);

        scrollOrderDetails.setBorder(null);
        scrollOrderDetails.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        panelOrderDetails.setBackground(Constants.COLOR_BG);
        panelOrderDetails.setLayout(new BoxLayout(panelOrderDetails, BoxLayout.Y_AXIS));
        scrollOrderDetails.setViewportView(panelOrderDetails);

        jPanel15.add(scrollOrderDetails, java.awt.BorderLayout.CENTER);

        jPanel6.add(jPanel15, java.awt.BorderLayout.CENTER);

        panelOrderInfo.setBackground(Constants.COLOR_BG);
        panelOrderInfo.setPreferredSize(new java.awt.Dimension(750, 480));

        jLabel6.setFont(new Font("Segoe UI", 1, 24)); // NOI18N
        jLabel6.setForeground(Constants.COLOR_PRIMARY);
        jLabel6.setText("Thông tin hoá đơn");

        jPanel9.setBackground(Constants.COLOR_BG);
        jPanel9.setPreferredSize(new java.awt.Dimension(505, 30));

        jLabel7.setFont(new Font("Segoe UI", 1, 20)); // NOI18N
        jLabel7.setForeground(Constants.COLOR_TEXT);
        jLabel7.setText("Tiền đặt cọc");

        lblDeposit.setEditable(false);
        lblDeposit.setBorder(BorderFactory.createMatteBorder(1, 1, 1, 1, Constants.COLOR_BG));
        lblDeposit.setFocusable(false);
        lblDeposit.setFont(new Font("Segoe UI", 0, 18)); // NOI18N

        GroupLayout jPanel9Layout = new GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
                jPanel9Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel9Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jLabel7)
                                .addGap(6, 6, 6))
                        .addGroup(jPanel9Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                .addGroup(GroupLayout.Alignment.TRAILING, jPanel9Layout.createSequentialGroup()
                                        .addGap(508, 508, 508)
                                        .addComponent(lblDeposit, GroupLayout.DEFAULT_SIZE, 236, Short.MAX_VALUE)
                                        .addContainerGap()))
        );
        jPanel9Layout.setVerticalGroup(
                jPanel9Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel7, GroupLayout.DEFAULT_SIZE, 33, Short.MAX_VALUE)
                        .addGroup(jPanel9Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel9Layout.createSequentialGroup()
                                        .addComponent(lblDeposit, GroupLayout.PREFERRED_SIZE, 28, GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 18, Short.MAX_VALUE)))
        );

        jPanel18.setBackground(Constants.COLOR_BG);
        jPanel18.setPreferredSize(new java.awt.Dimension(505, 30));

        jLabel14.setFont(new Font("Segoe UI", 1, 20)); // NOI18N
        jLabel14.setForeground(Constants.COLOR_TEXT);
        jLabel14.setText("Tổng tiền");

        lblTotalPrice.setEditable(false);
        lblTotalPrice.setBorder(BorderFactory.createMatteBorder(1, 1, 1, 1, Constants.COLOR_BG));
        lblTotalPrice.setFocusable(false);
        lblTotalPrice.setFont(new Font("Segoe UI", 0, 18)); // NOI18N

        GroupLayout jPanel18Layout = new GroupLayout(jPanel18);
        jPanel18.setLayout(jPanel18Layout);
        jPanel18Layout.setHorizontalGroup(
                jPanel18Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel18Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jLabel14)
                                .addContainerGap(641, Short.MAX_VALUE))
                        .addGroup(jPanel18Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                .addGroup(GroupLayout.Alignment.TRAILING, jPanel18Layout.createSequentialGroup()
                                        .addGap(507, 507, 507)
                                        .addComponent(lblTotalPrice, GroupLayout.DEFAULT_SIZE, 236, Short.MAX_VALUE)
                                        .addContainerGap()))
        );
        jPanel18Layout.setVerticalGroup(
                jPanel18Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel14, GroupLayout.DEFAULT_SIZE, 32, Short.MAX_VALUE)
                        .addGroup(jPanel18Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel18Layout.createSequentialGroup()
                                        .addComponent(lblTotalPrice, GroupLayout.PREFERRED_SIZE, 28, GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 15, Short.MAX_VALUE)))
        );

        jPanel21.setBackground(Constants.COLOR_BG);
        jPanel21.setPreferredSize(new java.awt.Dimension(505, 30));

        jLabel17.setFont(new Font("Segoe UI", 1, 20)); // NOI18N
        jLabel17.setForeground(Constants.COLOR_TEXT);
        jLabel17.setText("Ưu đãi sản phẩm");

        lblItemDiscount.setEditable(false);
        lblItemDiscount.setBorder(BorderFactory.createMatteBorder(1, 1, 1, 1, Constants.COLOR_BG));
        lblItemDiscount.setFocusable(false);
        lblItemDiscount.setFont(new Font("Segoe UI", 0, 18)); // NOI18N

        GroupLayout jPanel21Layout = new GroupLayout(jPanel21);
        jPanel21.setLayout(jPanel21Layout);
        jPanel21Layout.setHorizontalGroup(
                jPanel21Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel21Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jLabel17)
                                .addContainerGap(571, Short.MAX_VALUE))
                        .addGroup(jPanel21Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                .addGroup(GroupLayout.Alignment.TRAILING, jPanel21Layout.createSequentialGroup()
                                        .addGap(507, 507, 507)
                                        .addComponent(lblItemDiscount, GroupLayout.DEFAULT_SIZE, 236, Short.MAX_VALUE)
                                        .addContainerGap()))
        );
        jPanel21Layout.setVerticalGroup(
                jPanel21Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel17, GroupLayout.DEFAULT_SIZE, 33, Short.MAX_VALUE)
                        .addGroup(jPanel21Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel21Layout.createSequentialGroup()
                                        .addComponent(lblItemDiscount, GroupLayout.PREFERRED_SIZE, 28, GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 18, Short.MAX_VALUE)))
        );

        jPanel24.setBackground(Constants.COLOR_BG);
        jPanel24.setPreferredSize(new java.awt.Dimension(505, 30));

        jLabel19.setFont(new Font("Segoe UI", 1, 20)); // NOI18N
        jLabel19.setForeground(Constants.COLOR_TEXT);
        jLabel19.setText("Thành tiền");

        lblTotalPaid.setEditable(false);
        lblTotalPaid.setBorder(BorderFactory.createMatteBorder(1, 1, 1, 1, Constants.COLOR_BG));
        lblTotalPaid.setForeground(Constants.COLOR_PRIMARY);
        lblTotalPaid.setFocusable(false);
        lblTotalPaid.setFont(new Font("Segoe UI", 1, 18)); // NOI18N

        GroupLayout jPanel24Layout = new GroupLayout(jPanel24);
        jPanel24.setLayout(jPanel24Layout);
        jPanel24Layout.setHorizontalGroup(
                jPanel24Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel24Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jLabel19)
                                .addContainerGap(630, Short.MAX_VALUE))
                        .addGroup(jPanel24Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                .addGroup(GroupLayout.Alignment.TRAILING, jPanel24Layout.createSequentialGroup()
                                        .addGap(508, 508, 508)
                                        .addComponent(lblTotalPaid, GroupLayout.DEFAULT_SIZE, 236, Short.MAX_VALUE)
                                        .addContainerGap()))
        );
        jPanel24Layout.setVerticalGroup(
                jPanel24Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel19, GroupLayout.DEFAULT_SIZE, 33, Short.MAX_VALUE)
                        .addGroup(jPanel24Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel24Layout.createSequentialGroup()
                                        .addComponent(lblTotalPaid, GroupLayout.PREFERRED_SIZE, 28, GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 14, Short.MAX_VALUE)))
        );

        jPanel25.setBackground(Constants.COLOR_BG);
        jPanel25.setPreferredSize(new java.awt.Dimension(505, 30));

        jLabel20.setFont(new Font("Segoe UI", 1, 20)); // NOI18N
        jLabel20.setForeground(Constants.COLOR_TEXT);
        jLabel20.setText("Tiền khách đưa");

        lblGivenMoney.setBorder(BorderFactory.createMatteBorder(1, 1, 1, 1, Constants.COLOR_BG));
        lblGivenMoney.setFont(new Font("Segoe UI", 0, 18)); // NOI18N

        GroupLayout jPanel25Layout = new GroupLayout(jPanel25);
        jPanel25.setLayout(jPanel25Layout);
        jPanel25Layout.setHorizontalGroup(
                jPanel25Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel25Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jLabel20)
                                .addContainerGap(586, Short.MAX_VALUE))
                        .addGroup(jPanel25Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                .addGroup(GroupLayout.Alignment.TRAILING, jPanel25Layout.createSequentialGroup()
                                        .addGap(509, 509, 509)
                                        .addComponent(lblGivenMoney, GroupLayout.DEFAULT_SIZE, 236, Short.MAX_VALUE)
                                        .addContainerGap()))
        );
        jPanel25Layout.setVerticalGroup(
                jPanel25Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel20, GroupLayout.DEFAULT_SIZE, 33, Short.MAX_VALUE)
                        .addGroup(jPanel25Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel25Layout.createSequentialGroup()
                                        .addComponent(lblGivenMoney, GroupLayout.PREFERRED_SIZE, 28, GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 17, Short.MAX_VALUE)))
        );

        pnBtn.setBackground(Constants.COLOR_BG);
        pnBtn.setLayout(new java.awt.GridLayout(1, 0));

        btnExit.setBackground(Constants.COLOR_RED);
        btnExit.setForeground(new java.awt.Color(255, 255, 255));
        btnExit.setText("Thoát");
        btnExit.setFont(new Font("Segoe UI", 1, 18)); // NOI18N
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
                    btnExitActionPerformed(evt);
                } catch (Exception e) {
                    throw new RuntimeException(e);
                }
            }
        });
        pnBtn.add(btnExit);

        btnSave.setBackground(Constants.COLOR_GREEN);
        btnSave.setForeground(new java.awt.Color(255, 255, 255));
        btnSave.setText("Lưu");
        btnSave.setFont(new Font("Segoe UI", 1, 18)); // NOI18N
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
                    btnSaveActionPerformed(evt);
                } catch (Exception e) {
                    System.out.println(e.getMessage());
                    JOptionPane.showMessageDialog(null, "Không thể thực hiện");
                    try {
                        mainGUI.loadMainGUI();
                    } catch (Exception ex) {
                    }
                }
            }
        });
        pnBtn.add(btnSave);

        btnPay.setBackground(Constants.COLOR_ORANGE);
        btnPay.setForeground(new java.awt.Color(255, 255, 255));
        btnPay.setText("Thanh toán");
        btnPay.setFont(new Font("Segoe UI", 1, 18)); // NOI18N
        btnPay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
                    btnPayActionPerformed(evt);
                } catch (Exception e) {
                }
            }
        });
        pnBtn.add(btnPay);

        jPanel26.setBackground(Constants.COLOR_BG);
        jPanel26.setPreferredSize(new java.awt.Dimension(505, 30));

        jLabel21.setFont(new Font("Segoe UI", 1, 20)); // NOI18N
        jLabel21.setForeground(Constants.COLOR_TEXT);
        jLabel21.setText("Phương thức thanh toán");

        cbbPayment.setFont(new Font("Segoe UI", 0, 18)); // NOI18N
        cbbPayment.setMinimumSize(new java.awt.Dimension(72, 36));
        cbbPayment.setPreferredSize(new java.awt.Dimension(72, 36));

        GroupLayout jPanel26Layout = new GroupLayout(jPanel26);
        jPanel26.setLayout(jPanel26Layout);
        jPanel26Layout.setHorizontalGroup(
                jPanel26Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel26Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jLabel21)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(cbbPayment, GroupLayout.PREFERRED_SIZE, 236, GroupLayout.PREFERRED_SIZE)
                                .addContainerGap())
        );
        jPanel26Layout.setVerticalGroup(
                jPanel26Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel21, GroupLayout.Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(cbbPayment, GroupLayout.Alignment.TRAILING, GroupLayout.PREFERRED_SIZE, 33, Short.MAX_VALUE)
        );

        jPanel22.setBackground(Constants.COLOR_BG);
        jPanel22.setPreferredSize(new java.awt.Dimension(505, 30));

        jLabel18.setFont(new Font("Segoe UI", 1, 20)); // NOI18N
        jLabel18.setForeground(Constants.COLOR_TEXT);
        jLabel18.setText("Ưu đãi hoá đơn");

        lblOrderDiscount.setEditable(false);
        lblOrderDiscount.setBorder(BorderFactory.createMatteBorder(1, 1, 1, 1, Constants.COLOR_BG));
        lblOrderDiscount.setFocusable(false);
        lblOrderDiscount.setFont(new Font("Segoe UI", 0, 18)); // NOI18N

        GroupLayout jPanel22Layout = new GroupLayout(jPanel22);
        jPanel22.setLayout(jPanel22Layout);
        jPanel22Layout.setHorizontalGroup(
                jPanel22Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel22Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jLabel18)
                                .addContainerGap(583, Short.MAX_VALUE))
                        .addGroup(jPanel22Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                .addGroup(GroupLayout.Alignment.TRAILING, jPanel22Layout.createSequentialGroup()
                                        .addContainerGap(508, Short.MAX_VALUE)
                                        .addComponent(lblOrderDiscount, GroupLayout.PREFERRED_SIZE, 236, GroupLayout.PREFERRED_SIZE)
                                        .addContainerGap()))
        );
        jPanel22Layout.setVerticalGroup(
                jPanel22Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel18, GroupLayout.DEFAULT_SIZE, 33, Short.MAX_VALUE)
                        .addGroup(jPanel22Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel22Layout.createSequentialGroup()
                                        .addComponent(lblOrderDiscount, GroupLayout.PREFERRED_SIZE, 28, GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 14, Short.MAX_VALUE)))
        );

        jPanel27.setBackground(Constants.COLOR_BG);
        jPanel27.setPreferredSize(new java.awt.Dimension(505, 30));

        jLabel22.setFont(new Font("Segoe UI", 1, 20)); // NOI18N
        jLabel22.setForeground(Constants.COLOR_TEXT);
        jLabel22.setText("Tiền thừa");

        lblRefund.setEditable(false);
        lblRefund.setBorder(BorderFactory.createMatteBorder(1, 1, 1, 1, Constants.COLOR_BG));
        lblRefund.setFocusable(false);
        lblRefund.setFont(new Font("Segoe UI", 0, 18)); // NOI18N

        GroupLayout jPanel27Layout = new GroupLayout(jPanel27);
        jPanel27.setLayout(jPanel27Layout);
        jPanel27Layout.setHorizontalGroup(
                jPanel27Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel27Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jLabel22)
                                .addContainerGap(629, Short.MAX_VALUE))
                        .addGroup(jPanel27Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                .addGroup(GroupLayout.Alignment.TRAILING, jPanel27Layout.createSequentialGroup()
                                        .addGap(496, 496, 496)
                                        .addComponent(lblRefund, GroupLayout.DEFAULT_SIZE, 236, Short.MAX_VALUE)
                                        .addContainerGap()))
        );
        jPanel27Layout.setVerticalGroup(
                jPanel27Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel22, GroupLayout.DEFAULT_SIZE, 32, Short.MAX_VALUE)
                        .addGroup(jPanel27Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel27Layout.createSequentialGroup()
                                        .addComponent(lblRefund, GroupLayout.PREFERRED_SIZE, 28, GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 14, Short.MAX_VALUE)))
        );

        pnSuggest.setBackground(Constants.COLOR_BG);
        pnSuggest.setPreferredSize(new java.awt.Dimension(250, 50));
        pnSuggest.setLayout(new java.awt.GridLayout(2, 0));

        GroupLayout panelOrderInfoLayout = new GroupLayout(panelOrderInfo);
        panelOrderInfo.setLayout(panelOrderInfoLayout);
        panelOrderInfoLayout.setHorizontalGroup(
                panelOrderInfoLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addComponent(jPanel9, GroupLayout.DEFAULT_SIZE, 750, Short.MAX_VALUE)
                        .addComponent(jPanel18, GroupLayout.DEFAULT_SIZE, 750, Short.MAX_VALUE)
                        .addComponent(jPanel21, GroupLayout.DEFAULT_SIZE, 750, Short.MAX_VALUE)
                        .addComponent(jPanel24, GroupLayout.Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 750, Short.MAX_VALUE)
                        .addComponent(jPanel25, GroupLayout.Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 750, Short.MAX_VALUE)
                        .addComponent(pnBtn, GroupLayout.Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel26, GroupLayout.Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 750, Short.MAX_VALUE)
                        .addComponent(jPanel22, GroupLayout.DEFAULT_SIZE, 750, Short.MAX_VALUE)
                        .addGroup(panelOrderInfoLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(panelOrderInfoLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                        .addComponent(jPanel27, GroupLayout.DEFAULT_SIZE, 738, Short.MAX_VALUE)
                                        .addGroup(GroupLayout.Alignment.TRAILING, panelOrderInfoLayout.createSequentialGroup()
                                                .addGap(0, 178, Short.MAX_VALUE)
                                                .addComponent(pnSuggest, GroupLayout.PREFERRED_SIZE, 373, GroupLayout.PREFERRED_SIZE)
                                                .addGap(0, 187, Short.MAX_VALUE)))
                                .addContainerGap())
                        .addGroup(panelOrderInfoLayout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addGap(0, 0, Short.MAX_VALUE))
        );
        panelOrderInfoLayout.setVerticalGroup(
                panelOrderInfoLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(panelOrderInfoLayout.createSequentialGroup()
                                .addGap(5, 5, 5)
                                .addComponent(jLabel6)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel9, GroupLayout.PREFERRED_SIZE, 33, GroupLayout.PREFERRED_SIZE)
                                .addGap(8, 8, 8)
                                .addComponent(jPanel18, GroupLayout.PREFERRED_SIZE, 32, GroupLayout.PREFERRED_SIZE)
                                .addGap(8, 8, 8)
                                .addComponent(jPanel21, GroupLayout.PREFERRED_SIZE, 33, GroupLayout.PREFERRED_SIZE)
                                .addGap(8, 8, 8)
                                .addComponent(jPanel22, GroupLayout.PREFERRED_SIZE, 33, GroupLayout.PREFERRED_SIZE)
                                .addGap(7, 7, 7)
                                .addComponent(jPanel24, GroupLayout.PREFERRED_SIZE, 33, GroupLayout.PREFERRED_SIZE)
                                .addGap(8, 8, 8)
                                .addComponent(jPanel26, GroupLayout.PREFERRED_SIZE, 33, GroupLayout.PREFERRED_SIZE)
                                .addGap(8, 8, 8)
                                .addComponent(jPanel25, GroupLayout.PREFERRED_SIZE, 33, GroupLayout.PREFERRED_SIZE)
                                .addGap(6, 6, 6)
                                .addComponent(pnSuggest, GroupLayout.PREFERRED_SIZE, 66, GroupLayout.PREFERRED_SIZE)
                                .addGap(8, 8, 8)
                                .addComponent(jPanel27, GroupLayout.PREFERRED_SIZE, 32, GroupLayout.PREFERRED_SIZE)
                                .addGap(8, 8, 8)
                                .addComponent(pnBtn, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
        );

        jPanel6.add(panelOrderInfo, java.awt.BorderLayout.SOUTH);

        jPanel3.add(jPanel6, java.awt.BorderLayout.CENTER);

        jPanel1.add(jPanel3, java.awt.BorderLayout.EAST);

        jPanel5.setLayout(new java.awt.BorderLayout());

        jPanel2.setLayout(new java.awt.BorderLayout());

        jPanel7.setPreferredSize(new java.awt.Dimension(500, 50));
        jPanel7.setLayout(new BoxLayout(jPanel7, BoxLayout.LINE_AXIS));

        txtSearchItem.setFont(new Font("Segoe UI", 0, 16)); // NOI18N
        txtSearchItem.setMaximumSize(new java.awt.Dimension(2147483647, 70));
        txtSearchItem.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(KeyEvent evt) {
                try {
                    txtSearchItemKeyReleased(evt);
                } catch (Exception e) {
                    throw new RuntimeException(e);
                }
            }
        });
        jPanel7.add(txtSearchItem);

        cbbFilter.setModel(new DefaultComboBoxModel<>(new String[]{"Mặc định", "Giảm giá nhiều", "Giá từ cao đến thấp", "Giá từ thấp đến cao"}));
        cbbFilter.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                try {
                    cbbFilterItemStateChanged(evt);
                } catch (Exception e) {
                    throw new RuntimeException(e);
                }
            }
        });
        jPanel7.add(cbbFilter);

        jPanel2.add(jPanel7, java.awt.BorderLayout.NORTH);

        tabCategory.setBackground(new java.awt.Color(255, 255, 255));
        tabCategory.setTabLayoutPolicy(JTabbedPane.SCROLL_TAB_LAYOUT);
        tabCategory.setFocusable(false);
        tabCategory.setFont(new Font("Segoe UI", 0, 18)); // NOI18N
        tabCategory.setMinimumSize(new java.awt.Dimension(2000, 2000));
        tabCategory.setPreferredSize(new java.awt.Dimension(2000, 2000));
        tabCategory.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                try {
                    tabCategoryStateChanged(evt);
                } catch (Exception e) {
                    throw new RuntimeException(e);
                }
            }
        });
        jPanel2.add(tabCategory, java.awt.BorderLayout.CENTER);

        jPanel5.add(jPanel2, java.awt.BorderLayout.CENTER);

        jPanel11.setPreferredSize(new java.awt.Dimension(10, 1000));

        GroupLayout jPanel11Layout = new GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
                jPanel11Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGap(0, 10, Short.MAX_VALUE)
        );
        jPanel11Layout.setVerticalGroup(
                jPanel11Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGap(0, 1000, Short.MAX_VALUE)
        );

        jPanel5.add(jPanel11, java.awt.BorderLayout.EAST);

        jPanel1.add(jPanel5, java.awt.BorderLayout.CENTER);

        add(jPanel1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void txtSearchItemKeyReleased(KeyEvent evt) throws Exception {//GEN-FIRST:event_txtSearchItemKeyReleased
        String nameItem = txtSearchItem.getText();
        String nameCat = tabCategory.getTitleAt(tabCategory.getSelectedIndex());
        List<ItemEntity> items = itemBUS.findByName(nameItem, nameCat);
        loadItems(items);
    }//GEN-LAST:event_txtSearchItemKeyReleased

    private void cbbFloorItemStateChanged(java.awt.event.ItemEvent evt) throws Exception {//GEN-FIRST:event_cbbFloorItemStateChanged
        cbbTable.clearSelectedItems();
        cbbTable.removeAllItems();
        String floorName = cbbFloor.getSelectedItem().toString();
        FloorEntity floor = floorBUS.findByName(floorName);
        List<TableEntity> tables = tableBUS.getListTablesByStatus(floor.getFloorId(), "Tất cả");
        for (TableEntity table : tables) {
            cbbTable.addItem(table.getName());
        }
    }//GEN-LAST:event_cbbFloorItemStateChanged

    private void txtSearchCustomerKeyReleased(KeyEvent evt) throws Exception {//GEN-FIRST:event_txtSearchCustomerKeyReleased
        String search = txtSearchCustomer.getText();
        CustomerEntity cus = getCustomer();

        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            if (search.trim().equals("")) {
                JOptionPane.showMessageDialog(null, "Vui lòng nhập số điện thoại");
            } else if (cus != null) {
                updateInfoCustomer(cus);
                if (!cartDTO.getCart().isEmpty()) {
                    calcOrderDiscount();
                    calcTotalPaid();
                }
            } else {
                JOptionPane.showMessageDialog(null, "Khách hàng chưa tồn tại");
            }
        }
    }//GEN-LAST:event_txtSearchCustomerKeyReleased

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) throws Exception {//GEN-FIRST:event_btnSaveActionPerformed
        if (createOrder(PaymentStatusEnum.UNPAID)) {
            mainGUI.loadMainGUI();
        }
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) throws Exception {//GEN-FIRST:event_btnExitActionPerformed
        mainGUI.loadMainGUI();
    }//GEN-LAST:event_btnExitActionPerformed

    private void btnPayActionPerformed(java.awt.event.ActionEvent evt) throws Exception {//GEN-FIRST:event_btnPayActionPerformed
        if (JOptionPane.showConfirmDialog(null, "Xác nhận thanh toán?") == JOptionPane.YES_OPTION) {
            if (createOrder(PaymentStatusEnum.PAID)) {
                table.setTableStatus(TableStatusEnum.AVAILABLE);
                for (TableEntity tablee : this.o.getCombinedTables()) {
                    combinedTables.remove(tablee);
                }
                table = tableBUS.updateEntity(table);
                DialogReceipt dialog = new DialogReceipt(mainGUI, o);
                dialog.setVisible(true);
            }
            ;
        }

    }//GEN-LAST:event_btnPayActionPerformed

    private void cbbFilterItemStateChanged(java.awt.event.ItemEvent evt) throws Exception {//GEN-FIRST:event_cbbFilterItemStateChanged
        loadItems(getItemsFromNameTab());
    }//GEN-LAST:event_cbbFilterItemStateChanged

    private void tabCategoryStateChanged(javax.swing.event.ChangeEvent evt) throws Exception {//GEN-FIRST:event_tabCategoryStateChanged
        loadItems(getItemsFromNameTab());
    }//GEN-LAST:event_tabCategoryStateChanged

    private String getDataFromCbbFilter() {
        int index = cbbFilter.getSelectedIndex();
        if (index == 1) {
            return "promotion";
        } else if (index == 2) {
            return "desc";
        } else if (index == 3) {
            return "asc";
        }
        return "";
    }

    private List<ItemEntity> getItemsFromNameTab() throws Exception {
        String nameCat = tabCategory.getTitleAt(tabCategory.getSelectedIndex());
        CategoryEntity category = categoryBUS.findByName(nameCat);
        return itemBUS.getFilteredItems(category, getDataFromCbbFilter());
    }

    private void updateInfoCustomer(CustomerEntity cus) {
        txtSearchCustomer.setText(cus.getPhone());
        lblCusName.setText(cus.getName());
        lblCusLevel.setText(cus.getLevelCustomer().getCustomerLevel());
        lblRewardedPoint.setText(cus.getRewardedPoint() + "");
    }

    public void setUI() {
        txtSearchItem.putClientProperty(FlatClientProperties.PLACEHOLDER_TEXT, "Tìm món");
        txtSearchCustomer.putClientProperty(FlatClientProperties.PLACEHOLDER_TEXT, "Tìm khách hàng");
        txtNumberOfCustomer.putClientProperty(FlatClientProperties.PLACEHOLDER_TEXT, "4");
    }

    public void addTabCategory() throws Exception {
        List<CategoryEntity> categories = categoryBUS.getAllEntities();
        for (CategoryEntity category : categories) {
            List<ItemEntity> items = itemBUS.getFilteredItems(category, "promotion");
            PanelCategoryDetail pnCD = new PanelCategoryDetail(items, this);
            tabCategory.add(pnCD, category.getName());
        }
    }

    private void loadItems(List<ItemEntity> items) {
        PanelCategoryDetail pnCD = (PanelCategoryDetail) tabCategory.getSelectedComponent();
        pnCD.loadItemSearch(items);
    }

    private void loadFloors() throws Exception {
        List<FloorEntity> floors = floorBUS.getAllEntities();
        for (FloorEntity floor : floors) {
            cbbFloor.addItem(floor.getName());
        }
    }

    public void addPanelOrderDetail(PanelOrderDetail pnOD) throws Exception {
        PanelOrderDetail existingPNOD = findPanelOrderDetail(pnOD.getItemCartDTO());
        if (existingPNOD != null) {
            existingPNOD.updateLineTotal();
            existingPNOD.fixSTT();
        } else {
            panelOrderDetails.add(pnOD);
            ReloadComponentUlti.reload(panelOrderDetails);
            pnOD.fixSTT();
        }
        calcPrice();
    }

    public PanelOrderDetail findPanelOrderDetail(ItemCartDTO itemCartDTO) {
        for (Component comp : panelOrderDetails.getComponents()) {
            if (comp instanceof PanelOrderDetail) {
                PanelOrderDetail existingPNOD = (PanelOrderDetail) comp;
                if (existingPNOD.getItemCartDTO().equals(itemCartDTO)) {
                    return existingPNOD;
                }
            }
        }
        return null;
    }

    public boolean updateItemStock(ItemEntity item, int delta) throws Exception {
        int newStock = item.getStockQuantity() + delta;
        if (newStock < 0) {
            Notifications.getInstance().show(
                    Notifications.Type.ERROR,
                    Notifications.Location.TOP_RIGHT,
                    10000,
                    "Không đủ số lượng tồn kho!"
            );
            return false;
        }
        item.setStockQuantity(newStock);
        return itemBUS.updateEntity(item) != null;
    }

    public void removePanelOrderDetail(PanelOrderDetail pnOD) {
        panelOrderDetails.remove(pnOD);
        panelOrderDetails.revalidate();
        panelOrderDetails.repaint();
    }

    private void loadPaymentCombobox() {
        for (PaymentMethodEnum method : PaymentMethodEnum.values()) {
            cbbPayment.addItem(method.getPaymentMethod());
        }
    }

//    public boolean createOrder(PaymentStatusEnum paymentStatus) throws Exception {
//        TableEntity tableCBB = tableBUS.findByName(cbbTable.getSelectedItems().get(0).toString(),
//                floorBUS.findByName(cbbFloor.getSelectedItem().toString()).getFloorId());
//        FloorEntity floor = floorBUS.findByName(cbbFloor.getSelectedItem().toString());
//
//        this.o = orderBUS.findByTableId(tableCBB.getTableId());
//        boolean isNewOrder = false;
//
//        if (o == null) {
//            if (table.equals(tableCBB) ||
//                    (orderBUS.findByTableId(table.getTableId()) == null &&
//                            orderBUS.findByTableId(tableCBB.getTableId()) == null)) {
//                isNewOrder = true;
//                o = new OrderEntity();
//            } else {
//                o = orderBUS.findByTableId(table.getTableId());
//            }
//        }
//
//        o.setPaymentMethod(PaymentMethodEnum.convertToEnum(cbbPayment.getSelectedItem().toString()));
//        o.setPaymentStatus(paymentStatus);
//
//        if (isNewOrder) {
//            CustomerEntity customerG = getCustomer();
//            o.setCustomer(customerG != null ? customerG : dfCus);
//            o.setEmployee(LoginGUI.emp);
//            o.setTable(tableCBB);
//            o.setNumberOfCustomer(1);
//        }
//
//        boolean isSwitched = true;
//        if (table.equals(tableCBB)) {
//            updateTableStatus(table, TableStatusEnum.OCCUPIED);
//        } else if (o.getCombinedTables().isEmpty() && !o.getCombinedTables().contains(table)) {
//            updateTableStatus(table, TableStatusEnum.AVAILABLE);
//            updateTableStatus(tableCBB, TableStatusEnum.OCCUPIED);
//        } else {
//            isSwitched = false;
//            JOptionPane.showMessageDialog(null, "Không thể chuyển bàn gộp!", "Cảnh báo", JOptionPane.WARNING_MESSAGE);
//            cbbTable.clearSelectedItems();
//            List<TableEntity> temp = new ArrayList<>();
//            temp.add(o.getTable());
//            o.getCombinedTables().forEach(x -> temp.add(x));
//            cbbTable.setSelectedItems(temp.stream().map(x -> x.getName()).collect(Collectors.toList()));
//        }
//
//        List<TableEntity> listCombinedTables = (List<TableEntity>) cbbTable.getSelectedItems()
//                .stream()
//                .map(x -> {
//                    try {
//                        return tableBUS.findByName(x.toString(), floor.getFloorId());
//                    } catch (RemoteException e) {
//                        throw new RuntimeException(e);
//                    }
//                })
//                .filter(Objects::nonNull)
//                .filter(x -> !x.equals(tableCBB))
//                .collect(Collectors.toList());
//
//        List<TableEntity> tabless = o.getCombinedTables();
//        if (tabless == null) {
//            tabless = new ArrayList<>();
//        }
//
//        for (TableEntity t : tabless) {
//            if (!listCombinedTables.contains(t)) {
//                t.setTableStatus(TableStatusEnum.AVAILABLE);
//                tableBUS.updateEntity(t);
//                combinedTables.remove(t);
//            }
//        }
//
//        for (TableEntity t : listCombinedTables) {
//            if (!tabless.contains(t)) {
//                combinedTables.add(t);
//            }
//        }
//        o.setCombinedTables(listCombinedTables);
//
//        if (isSwitched) {
//            o.setTable(tableCBB);
//            int count = cbbTable.getSelectedItems().size();
//            updateOrderWithoutOrderDetails(o);
//
//            if (!isNewOrder) {
//                o.getOrderDetails().forEach(od -> {
//                    try {
//                        orderDetailBUS.deleteEntity(new OrderDetailId(
//                                od.getItem().getItemId(),
//                                od.getOrder().getOrderId(),
//                                od.getTopping().getToppingId()));
//                        updateItemStock(od.getItem(), od.getQuantity());
//                    } catch (Exception e) {
//                        e.printStackTrace();
//                    }
//                });
//            }
//
//            updatePriceOrder(getListOrderDetail(o), o);
//            if (count > 1) {
//                mergeTable(o, listCombinedTables);
//            }
//
//            if (paymentStatus == PaymentStatusEnum.PAID) {
//                if (o.getOrderDetails().isEmpty()) {
//                    JOptionPane.showMessageDialog(null, "Đơn hàng trống", "Lỗi", JOptionPane.ERROR_MESSAGE);
//                    return false;
//                } else {
//                    processPaidOrder(o);
//                }
//            }
//
//            try {
//                if (isNewOrder) {
//                    OrderEntity oTmp = orderBUS.insertEntity(o);
//                    if (oTmp == null) {
//                        JOptionPane.showMessageDialog(null, "Không thể thực hiện");
//                        return false;
//                    }
//                } else {
//                    orderBUS.updateEntity(o);
//                }
//            } catch (RemoteException e) {
//                JOptionPane.showMessageDialog(null, e.getMessage(), "Lỗi", JOptionPane.ERROR_MESSAGE);
//                return false;
//            }
//        }
//
//        return isSwitched;
//    }

    public boolean createOrder(PaymentStatusEnum paymentStatus) throws Exception {
        TableEntity tableCBB = tableBUS.findByName(cbbTable.getSelectedItems().get(0).toString(),
                floorBUS.findByName(cbbFloor.getSelectedItem().toString()).getFloorId());
        FloorEntity floor = floorBUS.findByName(cbbFloor.getSelectedItem().toString());

        this.o = orderBUS.findByTableId(tableCBB.getTableId());
        boolean isNewOrder = false;

        if (o == null) {
            if (table.equals(tableCBB) ||
                    (orderBUS.findByTableId(table.getTableId()) == null &&
                            orderBUS.findByTableId(tableCBB.getTableId()) == null)) {
                isNewOrder = true;
                o = new OrderEntity();
            } else {
                o = orderBUS.findByTableId(table.getTableId());
            }
        }

        o.setPaymentMethod(PaymentMethodEnum.convertToEnum(cbbPayment.getSelectedItem().toString()));
        o.setPaymentStatus(paymentStatus);

        if (isNewOrder) {
            CustomerEntity customerG = getCustomer();
            o.setCustomer(customerG != null ? customerG : dfCus);
            o.setEmployee(LoginGUI.emp);
            o.setTable(tableCBB);
            o.setNumberOfCustomer(1);
        }

        boolean isSwitched = true;
        if (table.equals(tableCBB)) {
            updateTableStatus(table, TableStatusEnum.OCCUPIED);
        } else if (o.getCombinedTables().isEmpty() && !o.getCombinedTables().contains(table)) {
            updateTableStatus(table, TableStatusEnum.AVAILABLE);
            updateTableStatus(tableCBB, TableStatusEnum.OCCUPIED);
        } else {
            isSwitched = false;
            JOptionPane.showMessageDialog(null, "Không thể chuyển bàn gộp!", "Cảnh báo", JOptionPane.WARNING_MESSAGE);
            cbbTable.clearSelectedItems();
            List<TableEntity> temp = new ArrayList<>();
            temp.add(o.getTable());
            o.getCombinedTables().forEach(x -> temp.add(x));
            cbbTable.setSelectedItems(temp.stream().map(x -> x.getName()).collect(Collectors.toList()));
        }

        List<TableEntity> listCombinedTables = (List<TableEntity>) cbbTable.getSelectedItems()
                .stream()
                .map(x -> {
                    try {
                        return tableBUS.findByName(x.toString(), floor.getFloorId());
                    } catch (RemoteException e) {
                        throw new RuntimeException(e);
                    }
                })
                .filter(Objects::nonNull)
                .filter(x -> !x.equals(tableCBB))
                .collect(Collectors.toList());

        List<TableEntity> tabless = o.getCombinedTables();
        if (tabless == null) {
            tabless = new ArrayList<>();
        }

        for (TableEntity t : tabless) {
            if (!listCombinedTables.contains(t)) {
                t.setTableStatus(TableStatusEnum.AVAILABLE);
                t = tableBUS.updateEntity(t);
                combinedTables.remove(t);
            }
        }

        for (TableEntity t : listCombinedTables) {
            if (!tabless.contains(t)) {
                combinedTables.add(t);
            }
        }
        o.setCombinedTables(listCombinedTables);

        if (isSwitched) {
            o.setTable(tableCBB);
            int count = cbbTable.getSelectedItems().size();
            updateOrderWithoutOrderDetails(o);

            if (!isNewOrder) {
                o.getOrderDetails().forEach(od -> {
                    try {
                        orderDetailBUS.deleteEntity(new OrderDetailId(
                                od.getItem().getItemId(),
                                od.getOrder().getOrderId(),
                                od.getTopping().getToppingId()));
                        updateItemStock(od.getItem(), od.getQuantity());
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                });
            }

            updatePriceOrder(getListOrderDetail(o), o);
            if (count > 1) {
                mergeTable(o, listCombinedTables);
            }

            if (paymentStatus == PaymentStatusEnum.PAID) {
                if (o.getOrderDetails().isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Đơn hàng trống", "Lỗi", JOptionPane.ERROR_MESSAGE);
                    return false;
                } else {
                    processPaidOrder(o);
                }
            }

            if(isNewOrder) {
                // Gửi yêu cầu vào hàng đợi thay vì gọi trực tiếp
                try {
                    orderBUS.queueOrderRequest(o, paymentStatus, this);
                    return true; // Trả về true để chờ xử lý bất đồng bộ
                } catch (RemoteException e) {
                    JOptionPane.showMessageDialog(null, e.getMessage(), "Lỗi", JOptionPane.ERROR_MESSAGE);
                    return false;
                }
            } else {
                o = orderBUS.updateEntity(o);
            }
        }

        return isSwitched;
    }
    private void updateTableStatus(TableEntity table, TableStatusEnum status) throws Exception {
        table.setTableStatus(status);
        TableEntity updatedTable = tableBUS.updateEntity(table);
        if (updatedTable == null) {
            throw new RemoteException("Cập nhật trạng thái bàn thất bại");
        }
    }

    private void processPaidOrder(OrderEntity o) throws Exception {
        if (o.getPaymentStatus() == PaymentStatusEnum.PAID) {
            updateCustomerWhenPayOrder(o);
            updateTableStatus(o.getTable(), TableStatusEnum.AVAILABLE);
            o.getCombinedTables().forEach(t -> {
                try {
                    updateTableStatus(t, TableStatusEnum.AVAILABLE);
                } catch (Exception e) {
                    throw new RuntimeException(e);
                }
                OrderEntity order = null;
                try {
                    order = orderBUS.findByTableId(t.getTableId());
                } catch (RemoteException e) {
                    throw new RuntimeException(e);
                }
                if (order != null) {
                    order.setPaymentStatus(PaymentStatusEnum.PAID);
                    try {
                        order = orderBUS.updateEntity(order);
                    } catch (RemoteException e) {
                        throw new RuntimeException(e);
                    }
                }
            });
        }
    }

    private void updateCustomerWhenPayOrder(OrderEntity o) throws Exception {
        if (!o.getCustomer().getPhone().equals(dfCus)) {
            Set<OrderEntity> orders = new HashSet<>();
            orders.add(o);
            o.getCustomer().setOrders(orders);
            o.getCustomer().setRewardedPoint();
            o.getCustomer().setCustomerLevel();
            o.setCustomer(customerBUS.updateEntity(o.getCustomer()));
        }
    }

    private void updatePriceOrder(Set<OrderDetailEntity> orderDetails, OrderEntity o) throws Exception {
        o.setOrderDetails(orderDetails);
        applyOrderDiscount(o);
        o.setTotalPrice();
        o.setTotalDiscount();
        o.setTotalPaid();
    }

//    private void insertOrderDetail(OrderDetailEntity od) throws Exception {
//        od.setLineTotal();
//        od.setDiscount();
//        orderDetailBUS.insertEntity(od);
//    }

    private Set<OrderDetailEntity> getListOrderDetail(OrderEntity o) throws Exception {
        Set<OrderDetailEntity> orderDetails = new HashSet<>();
        for (Map.Entry<ItemCartDTO, Integer> entry : cartDTO.getCart().entrySet()) {
            int qty = entry.getValue();
            ItemEntity item = entry.getKey().getItem();
            ItemToppingEntity itemTopping = entry.getKey().getItemTopping();
            ToppingEntity topping = null;
            if (itemTopping == null) {
                topping = toppingBUS.getAllEntities().get(0);
            } else {
                topping = itemTopping.getTopping();
            }
            PanelOrderDetail pn = findPanelOrderDetail(entry.getKey());
            String desc = pn.getTxtDescription().getText();
            if (desc != null && !desc.equals("")) {
                desc = desc.trim();
            }
            entry.getKey().setDescription(desc);
            OrderDetailEntity od = new OrderDetailEntity(qty, desc, item, o, topping);
//            insertOrderDetail(od);
            orderDetails.add(od);
            updateItemStock(od.getItem(), -od.getQuantity());
        }
        return orderDetails;
    }

    private CustomerEntity getCustomer() throws Exception {
        if (txtSearchCustomer.getText().trim().equals("") || txtSearchCustomer.getText() == null) {
            return dfCus;
        } else {
            CustomerEntity customerEntity = customerBUS.findByPhone(txtSearchCustomer.getText());
            return customerEntity;
        }
    }

    private void updateOrderWithoutOrderDetails(OrderEntity o) throws Exception {
        String numberOfCustomerStr = txtNumberOfCustomer.getText();
        int numberOfCustomer = 1;
        if (NumberUltis.isInt(numberOfCustomerStr)) {
            numberOfCustomer = Integer.parseInt(numberOfCustomerStr);
        }
        o.setNumberOfCustomer(numberOfCustomer);
        CustomerEntity customer = getCustomer();
        o.setCustomer(customer);
        EmployeeEntity e = LoginGUI.emp;
        o.setEmployee(e);
        if (o.getPaymentStatus().equals(PaymentStatusEnum.UNPAID)) {
            o.setExpectedCompletionTime(LocalDateTime.now().plusMinutes(Constants.RESERVATION_TIMEOUT_MINUTES));
        } else {
            o.setExpectedCompletionTime(LocalDateTime.now());
        }
    }

    private void applyOrderDiscount(OrderEntity o) throws Exception {
        CustomerEntity customer = getCustomer();
        PromotionEntity promotionEntity = null;
        promotionEntity = promotionBUS.getBestPromotionByCustomerLevelAndTotalPrice(totalPrice - itemDiscount - deposit, customer.getCustomerLevel());
        o.setPromotion(promotionEntity);
    }

    private void mergeTable(OrderEntity o0, List<TableEntity> combineTables) throws Exception {
        Map<ItemCartDTO, Integer> mergedODs = new HashMap<>();
        //Bàn nguồn 
        FloorEntity floor = floorBUS.findByName(cbbFloor.getSelectedItem().toString());
        TableEntity t0 = tableBUS.findByName(cbbTable.getSelectedItems().get(0).toString(), floor.getFloorId());

        if (!o0.getOrderDetails().isEmpty()) {
            o0.getOrderDetails()
                    .forEach(x -> {
                        try {
                            mergedODs.merge(new ItemCartDTO(x.getItem(),
                                            itemToppingBUS.findByItemAndToppingId(x.getItem(), x.getTopping()), x.getDescription()),
                                    x.getQuantity(), Integer::sum);
                        } catch (RemoteException e) {
                            throw new RuntimeException(e);
                        }
                    });
        }

        List<OrderEntity> orderOfCombineTables = combineTables.stream()
                .map(x -> {
                    try {
                        return (OrderEntity) orderBUS.findByTableId(x.getTableId());
                    } catch (RemoteException e) {
                        throw new RuntimeException(e);
                    }
                })
                .filter(Objects::nonNull)
                .collect(Collectors.toList());

        orderOfCombineTables.stream()
                .flatMap(o -> o.getOrderDetails().stream())
                .forEach(x -> {
                    try {
                        mergedODs.merge(new ItemCartDTO(x.getItem(),
                                        itemToppingBUS.findByItemAndToppingId(x.getItem(), x.getTopping()), x.getDescription()),
                                x.getQuantity(), Integer::sum);
                    } catch (RemoteException e) {
                        throw new RuntimeException(e);
                    }
                });

        orderOfCombineTables.forEach(o -> {
            o.setOrderStatus(OrderStatusEnum.MERGED);
            try {
                o = orderBUS.updateEntity(o);
            } catch (RemoteException e) {
                throw new RuntimeException(e);
            }
        });

        //OrderDetails mới
        OrderEntity finalO = o0;
        Set<OrderDetailEntity> newODs = mergedODs.entrySet().stream()
                .map(entry -> new OrderDetailEntity(entry.getValue(), entry.getKey().getDescription(), entry.getKey().getItem(), finalO,
                        entry.getKey().getItemTopping().getTopping()))
                .collect(Collectors.toSet());

        o0.getOrderDetails()
                .forEach(x -> {
                    try {
                        orderDetailBUS.deleteEntity(new OrderDetailId(x.getItem().getItemId(), x.getOrder().getOrderId(), x.getTopping().getToppingId()));
                    } catch (RemoteException e) {
                        throw new RuntimeException(e);
                    }
                });

//        newODs.forEach(od -> {
//            try {
//                insertOrderDetail(od);
//            } catch (Exception e) {
//                throw new RuntimeException(e);
//            }
//        });
        loadPrice(newODs);
        updatePriceOrder(newODs, o0);
        o0.setExpectedCompletionTime(LocalDateTime.now().plusMinutes(Constants.RESERVATION_TIMEOUT_MINUTES));
        o0=orderBUS.updateEntity(o0);

        orderOfCombineTables.stream()
                .flatMap(o -> o.getOrderDetails().stream())
                .forEach(od -> {
                    try {
                        orderDetailBUS.deleteEntity(new OrderDetailId(od.getItem().getItemId(), od.getOrder().getOrderId(), od.getTopping().getToppingId()));
                    } catch (RemoteException e) {
                        throw new RuntimeException(e);
                    }
                });

        orderOfCombineTables.stream()
                .forEach(o -> {
                    try {
                        updatePriceOrder(null, o);
                        o=orderBUS.updateEntity(o);
                    } catch (Exception e) {
                        throw new RuntimeException(e);
                    }
                });
        cartDTO.setCart(mergedODs);
    }

    private void loadPrice(Set<OrderDetailEntity> orderDetails) throws Exception {
        totalPrice = orderDetails.stream().mapToDouble(od -> od.getItem().getSellingPrice() * od.getQuantity()).sum();
        itemDiscount = orderDetails.stream().mapToDouble(OrderDetailEntity::getDiscount).sum();

        calcOrderDiscount();
        calcTotalPaid();
    }

    public void loadOrder(OrderEntity o) throws Exception {
        cartDTO = new CartDTO();
        this.table = o.getTable();

        List<String> tables = new ArrayList<>();
        tables.add(o.getTable().getName());

        Set<TableEntity> listOfCombinedTable = new HashSet<>();

        for (TableEntity t : o.getCombinedTables()) {
            listOfCombinedTable.add(tableBUS.getEntityById(t.getTableId()));
        }

        tables.addAll(o.getCombinedTables().stream().map(x -> x.getName()).toList());
        cbbTable.clearSelectedItems();
        cbbTable.setSelectedItems(tables);
        panelOrderDetails.removeAll();

        CustomerEntity customer = o.getCustomer();
        if (!o.getCustomer().equals(dfCus)) {
            txtSearchCustomer.setText(customer.getPhone());
            lblCusName.setText(customer.getName());
            lblCusLevel.setText(customer.getLevelCustomer().getCustomerLevel());
            lblRewardedPoint.setText(customer.getRewardedPoint() + "");
        }
        txtNumberOfCustomer.setText(o.getNumberOfCustomer() + "");

        //PanelOrderDetails
        for (OrderDetailEntity od : o.getOrderDetails()) {
            ItemToppingEntity topping = itemToppingBUS.findByItemAndToppingId(od.getItem(), od.getTopping());
            ItemCartDTO itemCartDTO = new ItemCartDTO(od.getItem(), topping, od.getDescription());
            cartDTO.insert(itemCartDTO);
            cartDTO.updateQty(itemCartDTO, od.getQuantity());
            PanelOrderDetail pnOD = new PanelOrderDetail(itemCartDTO, this);
            pnOD.setQty(cartDTO.getItemQty(itemCartDTO));
            panelOrderDetails.add(pnOD);
            panelOrderDetails.revalidate();
            panelOrderDetails.repaint();
            pnOD.fixSTT();
        }

        //Price
        lblDeposit.setText(DoubleFormatUlti.format(o.getDeposit()));
        lblTotalPrice.setText(DoubleFormatUlti.format(o.getTotalPrice()));
        double totalDiscountO = o.getTotalDiscount();
        double itemDiscountO = o.getOrderDetails().stream()
                .mapToDouble(OrderDetailEntity::getDiscount)
                .sum();
        double orderDiscountO = totalDiscountO - itemDiscountO;

        lblItemDiscount.setText(DoubleFormatUlti.format(itemDiscountO));
        lblOrderDiscount.setText(DoubleFormatUlti.format(orderDiscountO));
        lblTotalPaid.setText(DoubleFormatUlti.format(o.getTotalPaid()));

        totalPrice = o.getTotalPrice();
        totalPaid = o.getTotalPaid();
        orderDiscount = orderDiscountO;
        itemDiscount = itemDiscountO;
        deposit = o.getDeposit();
        setButtonsSuggest();
        cbbPayment.setSelectedItem(o.getPaymentStatus().toString());

    }

    public void calcTotalPrice() {
        totalPrice = cartDTO.getTotalPrice();
        lblTotalPrice.setText(DoubleFormatUlti.format(totalPrice));
    }

    public void calcItemDiscount() {
        itemDiscount = cartDTO.getItemDiscount();
        lblItemDiscount.setText(DoubleFormatUlti.format(itemDiscount));
    }

    public void calcTotalPaid() {
        totalPaid = cartDTO.getTotalPaid(deposit, orderDiscount);
        lblTotalPaid.setText(DoubleFormatUlti.format(totalPaid));
        setButtonsSuggest();
    }

    public void calcOrderDiscount() throws Exception {
        String levelCustomerStr = lblCusLevel.getText();
        if (levelCustomerStr.trim().equals("") || levelCustomerStr == null) {
            levelCustomerStr = LevelCustomer.NEW.getLevelCustomer();
        }
        totalPaid = cartDTO.getTotalPaid(deposit, 0);
        PromotionEntity p = promotionBUS.getBestPromotionByCustomerLevelAndTotalPrice(totalPaid, CustomerLevelEnum.convertToEnum(levelCustomerStr));
        if (p != null) {
            String notice = "Áp dụng khuyến mãi " + String.format("%.0f", p.getDiscountPercentage() * 100) + "% " + " với tổng hoá đơn trên " + DoubleFormatUlti.format(p.getMinPrice());
            if (!set.contains(notice)) {
                JOptionPane.showMessageDialog(null, notice);
                set.add(notice);
            }

            orderDiscount = totalPaid * p.getDiscountPercentage();
        } else {
            List<String> list = set.stream().collect(Collectors.toList());
            set.removeAll(list);
            orderDiscount = 0;
        }
        lblOrderDiscount.setText(DoubleFormatUlti.format(orderDiscount));

    }

    public void calcPrice() throws Exception {
        calcTotalPrice();
        calcItemDiscount();
        calcOrderDiscount();
        calcTotalPaid();
    }

    private void setButtonsSuggest() {
        pnSuggest.removeAll(); // Xóa các nút hiện tại
        int[] suggestions = getSuggestDecimal(totalPaid); // Lấy danh sách gợi ý

        for (double suggestion : suggestions) {
            RoundedButton btnSuggest = new RoundedButton();
            btnSuggest.setText(DoubleFormatUlti.format(suggestion));
            btnSuggest.setFont(new Font(getFont().getName(), Font.PLAIN, 16));

            // Sử dụng Lambda cho ActionListener
            btnSuggest.addActionListener(e -> {
                double change = suggestion - totalPaid;
                lblRefund.setText(DoubleFormatUlti.format(change));
                lblGivenMoney.setText(DoubleFormatUlti.format(suggestion));
            });

            pnSuggest.add(btnSuggest); // Thêm nút vào panel
        }

        pnSuggest.revalidate(); // Cập nhật giao diện
        pnSuggest.repaint();
    }

    private int[] getSuggestDecimal(double finalPrice) {
        int billAmount = (int) finalPrice;
        List<Integer> denominations = getSuggestedDenominations(billAmount);

        int[] resultArray = new int[denominations.size()];
        for (int i = 0; i < denominations.size(); i++) {
            resultArray[i] = denominations.get(i);
        }
        return resultArray;
    }

    private List<Integer> getSuggestedDenominations(int billAmount) {
        List<Integer> suggestedDenominations = new ArrayList<>();
        suggestedDenominations.add(billAmount); // Thêm số tiền gốc

        int[] nearbyAmounts = {
                roundUpToNearest(billAmount, 5_000),
                roundUpToNearest(billAmount, 10_000),
                roundUpToNearest(billAmount, 50_000),
                roundUpToNearest(billAmount, 100_000),
                roundUpToNearest(billAmount, 200_000),
                roundUpToNearest(billAmount, 500_000)
        };

        for (int amount : nearbyAmounts) {
            if (amount > billAmount && !suggestedDenominations.contains(amount)) {
                suggestedDenominations.add(amount);
            }
        }

        // Đảm bảo có ít nhất 4 nút gợi ý
        while (suggestedDenominations.size() < 4) {
            billAmount += 5_000;
            if (!suggestedDenominations.contains(billAmount)) {
                suggestedDenominations.add(billAmount);
            }
        }

        Collections.sort(suggestedDenominations); // Sắp xếp tăng dần
        return suggestedDenominations;
    }

    // Hàm làm tròn lên mệnh giá gần nhất
    private int roundUpToNearest(int amount, int nearest) {
        return ((amount + nearest - 1) / nearest) * nearest;
    }

    public void clearData() {
        panelOrderDetails.removeAll();
        pnSuggest.removeAll();
        ReloadComponentUlti.reload(panelOrderDetails);
        ReloadComponentUlti.reload(pnSuggest);
        cbbTable.clearSelectedItems();
        resetPrice();
        setPricetTxt("0", lblTotalPaid, lblTotalPrice, lblItemDiscount, lblOrderDiscount, lblDeposit);
        setPricetTxt("", lblCusName, lblCusLevel, lblGivenMoney, lblRefund, lblRewardedPoint, txtSearchCustomer);
        setUI();
    }

    private void setPricetTxt(String text, JTextField... fields) {
        for (JTextField field : fields) {
            field.setText(text);
        }
    }

    private void resetPrice() {
        totalPaid = 0;
        totalPrice = 0;
        itemDiscount = 0;
        orderDiscount = 0;
        deposit = 0;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private RoundedButton btnExit;
    private RoundedButton btnPay;
    private RoundedButton btnSave;
    private JComboBox<String> cbbFilter;
    private JComboBox<String> cbbFloor;
    private JComboBox<String> cbbPayment;
    private gui.custom.ComboBoxMultiSelection cbbTable;
    private Box.Filler filler1;
    private Box.Filler filler2;
    private Box.Filler filler3;
    private Box.Filler filler4;
    private JLabel jLabel10;
    private JLabel jLabel13;
    private JLabel jLabel14;
    private JLabel jLabel15;
    private JLabel jLabel17;
    private JLabel jLabel18;
    private JLabel jLabel19;
    private JLabel jLabel2;
    private JLabel jLabel20;
    private JLabel jLabel21;
    private JLabel jLabel22;
    private JLabel jLabel4;
    private JLabel jLabel5;
    private JLabel jLabel6;
    private JLabel jLabel7;
    private JLabel jLabel9;
    private JPanel jPanel1;
    private JPanel jPanel10;
    private JPanel jPanel11;
    private JPanel jPanel15;
    private JPanel jPanel17;
    private JPanel jPanel18;
    private JPanel jPanel19;
    private JPanel jPanel2;
    private JPanel jPanel21;
    private JPanel jPanel22;
    private JPanel jPanel24;
    private JPanel jPanel25;
    private JPanel jPanel26;
    private JPanel jPanel27;
    private JPanel jPanel3;
    private JPanel jPanel4;
    private JPanel jPanel5;
    private JPanel jPanel6;
    private JPanel jPanel7;
    private JPanel jPanel8;
    private JPanel jPanel9;
    private gui.custom.RoundedTextField lblCusLevel;
    private gui.custom.RoundedTextField lblCusName;
    private gui.custom.RoundedTextField lblDeposit;
    private gui.custom.RoundedTextField lblGivenMoney;
    private gui.custom.RoundedTextField lblItemDiscount;
    private JLabel lblName;
    private gui.custom.RoundedTextField lblOrderDiscount;
    private gui.custom.RoundedTextField lblRefund;
    private gui.custom.RoundedTextField lblRewardedPoint;
    private JLabel lblSTT;
    private gui.custom.RoundedTextField lblTotalPaid;
    private gui.custom.RoundedTextField lblTotalPrice;
    private JLabel lblthanhtien;
    private JLabel lblthanhtien1;
    private JPanel panelCustomerInfo;
    private JPanel panelOrderDetails;
    private JPanel panelOrderInfo;
    private JPanel pnBtn;
    private JPanel pnSuggest;
    private JScrollPane scrollOrderDetails;
    public JTabbedPane tabCategory;
    private gui.custom.RoundedTextField txtNumberOfCustomer;
    private gui.custom.RoundedTextField txtSearchCustomer;
    private JTextField txtSearchItem;

    @Override
    public void notifyOrderResult(boolean success, String message, OrderEntity order) throws RemoteException {
        SwingUtilities.invokeLater(() -> {
            JOptionPane.showMessageDialog(null, message, success ? "Thành công" : "Lỗi",
                    success ? JOptionPane.INFORMATION_MESSAGE : JOptionPane.ERROR_MESSAGE);
            if (success && order != null) {
                this.o = order;
                try {
                    if (order.getPaymentStatus() == PaymentStatusEnum.PAID) {
                        table.setTableStatus(TableStatusEnum.AVAILABLE);
                        table = tableBUS.updateEntity(table);
                        combinedTables.clear();
                        DialogReceipt dialog = new DialogReceipt(mainGUI, o);
                        dialog.setVisible(true);
                    }
                    mainGUI.loadMainGUI();
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "Lỗi khi cập nhật giao diện: " + e.getMessage(), "Lỗi", JOptionPane.ERROR_MESSAGE);
                }
            }
        });
    }
    // End of variables declaration//GEN-END:variables
}
