/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package gui.staff;

import bus.OrderBUS;
import bus.TableBUS;
import common.Constants;
import dto.CartDTO;
import model.*;
import gui.menu.Application;
import gui.FormLoad;

import java.time.LocalDateTime;
import java.util.List;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import model.enums.OrderStatusEnum;
import model.enums.OrderTypeEnum;
import model.enums.PaymentStatusEnum;
import model.enums.ReservationStatusEnum;
import model.enums.TableStatusEnum;
import util.ResizeImage;

/**
 *
 * @author Trần Ngọc Huyền.
 */
public class PanelTable extends javax.swing.JPanel {

    /**
     * Creates new form PanelTable
     */
    private TableEntity table;
    private FloorEntity floor;
    private OrderGUI orderGUI;
    private OrderBUS orderBUS;
    private OrderEntity o;
    
    private TableBUS tableBUS;
    
    public PanelTable(TableEntity table, OrderGUI orderGUI) throws Exception {
        initComponents();
        setOpaque(false);
        this.table = table;
        this.orderGUI = orderGUI;
        orderBUS = FormLoad.orderBUS;
        tableBUS = FormLoad.tableBUS;
        setOpaque(false);
        
        fillContent();
    }
    
    public TableEntity getTable() {
        return table;
    }
    
    public void setTable(TableEntity table) {
        this.table = table;
    }
    
    public FloorEntity getFloor() {
        return floor;
    }
    
    public void setFloor(FloorEntity floor) {
        this.floor = floor;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblImg = new javax.swing.JLabel();

        setBackground(Constants.COLOR_BG);
        setPreferredSize(new java.awt.Dimension(200, 200));
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                try {
                    formMouseClicked(evt);
                } catch (Exception e) {
                    throw new RuntimeException(e);
                }
            }
        });

        lblImg.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        lblImg.setForeground(new java.awt.Color(255, 255, 255));
        lblImg.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblImg.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblImg, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblImg, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formMouseClicked(java.awt.event.MouseEvent evt) throws Exception {//GEN-FIRST:event_formMouseClicked
        List<OrderEntity> list = orderBUS.getCurrentOrdersAndReservations(LocalDateTime.now(), 0);
        o = list.stream().filter(x -> x.getTable().getTableId().equalsIgnoreCase(table.getTableId())).findFirst().orElse(null);
        
        if (o == null || (o.getOrderDetails().isEmpty() && o.getOrderType().equals(OrderTypeEnum.IMMEDIATE) && o.getOrderStatus().equals(OrderStatusEnum.MERGED))) {
            o = orderBUS.getMergedOrderByCombineTable(table);
        }
        
        boolean check = true;
        if (o != null) {
            if (o.getReservationStatus().equals(ReservationStatusEnum.PENDING)) {
                JOptionPane.showMessageDialog(null, "Không thể chọn bàn đã đặt trước!", "<html><b>Lỗi</b></html>", JOptionPane.ERROR_MESSAGE);
                check = false;
            }
        }
        
        if (check) {
            orderGUI.setTable(table);
            if (o != null) {
                orderGUI.loadOrder(o);
            } else {
                orderGUI.setCartDTO(new CartDTO());
            }
            
            displayOrderGUI();
        }
//        } else {
//            JOptionPane.showMessageDialog(null, "Không thể chọn bàn đã đặt trước!", "<html><b>Lỗi</b></html>", JOptionPane.ERROR_MESSAGE);
//        }

    }//GEN-LAST:event_formMouseClicked
    private void displayOrderGUI() {
        Application.app.showForm(orderGUI);
    }
    
    public void fillContent() throws Exception {
        List<OrderEntity> list = orderBUS.getCurrentOrdersAndReservations(LocalDateTime.now(), 0);
        o = list.stream().filter(x -> x.getTable().getTableId().equalsIgnoreCase(table.getTableId())).findFirst().orElse(null);
        
        if(o != null && (o.getReservationTime().isBefore(LocalDateTime.now().minusHours(1)) || o.getReservationTime().isAfter(LocalDateTime.now().plusHours(1)))) {
            o = null;
        }
        
        ImageIcon icon = new ImageIcon(getClass().getResource("/img/icon/png/available-table.png"));
        
        if (o != null) {
            o.getCombinedTables().stream()
                    .forEach(t -> {
                        if (!this.orderGUI.getCombinedTables().contains(t)) {
                            this.orderGUI.getCombinedTables().add(t);
                        }
                    });
            if ((o.getOrderStatus() == OrderStatusEnum.MERGED && o.getPaymentStatus().equals(PaymentStatusEnum.UNPAID))) {
                icon = new ImageIcon(getClass().getResource("/img/icon/png/merged-table.png"));
            } else if (o.getOrderType().equals(OrderTypeEnum.ADVANCE) && o.getReservationStatus().equals(ReservationStatusEnum.PENDING)
                    && o.getReservationTime().minusMinutes(Constants.RESERVATION_TIMEOUT_MINUTES).isBefore(LocalDateTime.now())
                    && (o.getExpectedCompletionTime() != null ? !o.getExpectedCompletionTime().isBefore(LocalDateTime.now()) : true)) {
                icon = new ImageIcon(getClass().getResource("/img/icon/png/advanced-table.png"));
            }
        } else {
            if (table.getTableStatus().equals(TableStatusEnum.AVAILABLE)) {
                icon = new ImageIcon(getClass().getResource("/img/icon/png/available-table.png"));
            }
        }
        if (table.getTableStatus().toString().equals("OCCUPIED")) {
            icon = new ImageIcon(getClass().getResource("/img/icon/png/occupied-table.png"));
        }
        
        if (this.orderGUI.getCombinedTables().contains(this.table)) {
            icon = new ImageIcon(getClass().getResource("/img/icon/png/merged-table.png"));
        }
        
        icon = ResizeImage.resizeImage(icon, 200, 200);
        lblImg.setIcon(icon);
        lblImg.setText(table.getName());
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel lblImg;
    // End of variables declaration//GEN-END:variables
}
