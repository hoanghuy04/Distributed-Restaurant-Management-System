/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import bus.*;
import bus.impl.*;
import com.formdev.flatlaf.FlatLightLaf;
import common.Constants;
import dal.connectDB.ConnectDB;
import gui.main.LoginGUI;
import io.github.cdimascio.dotenv.Dotenv;

import java.awt.Color;
import java.io.File;
import java.io.FileOutputStream;
import java.rmi.Naming;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;
import javax.swing.JDialog;

import static util.HostNameUtil.*;

/**
 *
 * @author RAVEN
 */
public class FormLoad extends javax.swing.JDialog {

    private static final Dotenv dotenv = Dotenv.load();
    private static final String SERVER_HOST_NAME = dotenv.get("SERVER_HOST_NAME");


    /**
     * Creates new form Application
     */
    public static CategoryBUS categoryBUS;
    public static ItemBUS itemBUS;
    public static FloorBUS floorBUS;
    public static TableBUS tableBUS;
    public static CustomerBUS customerBUS;
    public static OrderBUS orderBUS;
    public static OrderDetailBUS orderDetailBUS;
    public static EmployeeBUS employeeBUS;
    public static PromotionBUS promotionBUS;
    public static PromotionDetailBUS promotionDetailBUS;
    public static ToppingBUS toppingBUS;
    public static ItemToppingBUS itemToppingBUS;
    public static RoleBUS roleBUS;
    public static FileBUS fileBUS;

    public FormLoad(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        getContentPane().setBackground(new Color(221, 221, 221));
        //  To disable key Alt+F4 to close dialog
        setDefaultCloseOperation(JDialog.DO_NOTHING_ON_CLOSE);


    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        curvesPanel1 = new gui.splashscreen.CurvesPanel();
        jLabel1 = new javax.swing.JLabel();
        pro = new gui.splashscreen.ProgressBarCustom();
        lbStatus = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
//        setUndecorated(true);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        curvesPanel1.setBackground(Constants.COLOR_PRIMARY);
        curvesPanel1.setForeground(new java.awt.Color(153, 255, 255));

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/icon/png/logo.png"))); // NOI18N

        lbStatus.setFont(new java.awt.Font("Segoe UI", 2, 14)); // NOI18N
        lbStatus.setForeground(new java.awt.Color(200, 200, 200));
        lbStatus.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbStatus.setText("Status");

        javax.swing.GroupLayout curvesPanel1Layout = new javax.swing.GroupLayout(curvesPanel1);
        curvesPanel1.setLayout(curvesPanel1Layout);
        curvesPanel1Layout.setHorizontalGroup(
                curvesPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(curvesPanel1Layout.createSequentialGroup()
                                .addContainerGap(277, Short.MAX_VALUE)
                                .addGroup(curvesPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(pro, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(lbStatus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addContainerGap(278, Short.MAX_VALUE))
        );
        curvesPanel1Layout.setVerticalGroup(
                curvesPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(curvesPanel1Layout.createSequentialGroup()
                                .addContainerGap(107, Short.MAX_VALUE)
                                .addComponent(jLabel1)
                                .addGap(18, 18, 18)
                                .addComponent(pro, javax.swing.GroupLayout.PREFERRED_SIZE, 5, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lbStatus)
                                .addContainerGap(108, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(3, 3, 3)
                                .addComponent(curvesPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(3, 3, 3))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(3, 3, 3)
                                .addComponent(curvesPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(3, 3, 3))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        new Thread(() -> {
            try {
                // Tạo thread pool để thực hiện các lookup song song
                ExecutorService executor = Executors.newFixedThreadPool(5); // Số thread tối đa (có thể điều chỉnh)

                // Danh sách các BUS cần lookup
                List<Runnable> lookupTasks = new ArrayList<>();
                lookupTasks.add(() -> lookupBus("CategoryBUS", CategoryBUS.class));
                lookupTasks.add(() -> lookupBus("ItemBUS", ItemBUS.class));
                lookupTasks.add(() -> lookupBus("FloorBUS", FloorBUS.class));
                lookupTasks.add(() -> lookupBus("TableBUS", TableBUS.class));
                lookupTasks.add(() -> lookupBus("CustomerBUS", CustomerBUS.class));
                lookupTasks.add(() -> lookupBus("OrderBUS", OrderBUS.class));
                lookupTasks.add(() -> lookupBus("OrderDetailBUS", OrderDetailBUS.class));
                lookupTasks.add(() -> lookupBus("EmployeeBUS", EmployeeBUS.class));
                lookupTasks.add(() -> lookupBus("PromotionBUS", PromotionBUS.class));
                lookupTasks.add(() -> lookupBus("ToppingBUS", ToppingBUS.class));
                lookupTasks.add(() -> lookupBus("ItemToppingBUS", ItemToppingBUS.class));
                lookupTasks.add(() -> lookupBus("PromotionDetailBUS", PromotionDetailBUS.class));
                lookupTasks.add(() -> lookupBus("RoleBUS", RoleBUS.class));
                lookupTasks.add(() -> lookupBus("FileBUS", FileBUS.class));

                // Cập nhật tiến trình
                doTask("Loading...", 5);

                // Thực thi tất cả các tác vụ lookup song song
                for (Runnable task : lookupTasks) {
                    executor.submit(task);
                }

                // Đóng thread pool và chờ tất cả tác vụ hoàn tất
                executor.shutdown();
                executor.awaitTermination(30, TimeUnit.SECONDS); // Timeout 30 giây

                doTask("Loading...", 50);

                // Hoàn tất
                doTask("Done ...", 20);

               ;

                for (String s:  fileBUS.listFiles("")) {
                    System.out.println(s);
// /resources/qrcode/O123213.jpg
                    byte [] mydata = fileBUS.downloadFileFromServer(s);
                    System.out.println("downloading...");
                    System.out.println(System.getProperty("user.dir") + "\\src\\main\\resources\\img\\item");
                    File clientpathfile = new File(System.getProperty("user.dir") + "\\src\\main\\resources\\img\\item"+ "\\" + s);
                    FileOutputStream out= new FileOutputStream(clientpathfile);
                    out.write(mydata);
                    out.flush();
                    out.close();
                }

                // Đóng form hiện tại và mở LoginGUI
                dispose();
                curvesPanel1.stop();
                new LoginGUI().setVisible(true);

            } catch (Exception e) {
                e.printStackTrace();
            }
        }).start();
    }//GEN-LAST:event_formWindowOpened

    // Hàm hỗ trợ lookup BUS
    private void lookupBus(String busName, Class<?> busClass) {
        try {
            System.out.println("Connecting to " + busName + "...");
            Object bus = Naming.lookup(getURI(SERVER_HOST_NAME, busClass));
            // Gán đối tượng vào biến tương ứng
            switch (busName) {
                case "CategoryBUS":
                    categoryBUS = (CategoryBUS) bus;
                    break;
                case "ItemBUS":
                    itemBUS = (ItemBUS) bus;
                    break;
                case "FloorBUS":
                    floorBUS = (FloorBUS) bus;
                    break;
                case "TableBUS":
                    tableBUS = (TableBUS) bus;
                    break;
                case "CustomerBUS":
                    customerBUS = (CustomerBUS) bus;
                    break;
                case "OrderBUS":
                    orderBUS = (OrderBUS) bus;
                    break;
                case "OrderDetailBUS":
                    orderDetailBUS = (OrderDetailBUS) bus;
                    break;
                case "EmployeeBUS":
                    employeeBUS = (EmployeeBUS) bus;
                    break;
                case "PromotionBUS":
                    promotionBUS = (PromotionBUS) bus;
                    break;
                case "ToppingBUS":
                    toppingBUS = (ToppingBUS) bus;
                    break;
                case "ItemToppingBUS":
                    itemToppingBUS = (ItemToppingBUS) bus;
                    break;
                case "PromotionDetailBUS":
                    promotionDetailBUS = (PromotionDetailBUS) bus;
                    break;
                case "RoleBUS":
                    roleBUS = (RoleBUS) bus;
                    break;
                case "FileBUS":
                    fileBUS = (FileBUS) bus;
                    break;
            }
            System.out.println("Connected to " + busName + " server");
        } catch (Exception e) {
            System.err.println("Failed to connect to " + busName + ": " + e.getMessage());
            e.printStackTrace();
        }
    }

    private void doTask(String taskName, int progress) throws Exception {
        lbStatus.setText(taskName);
        pro.setValue(progress);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws Exception {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FormLoad.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FormLoad.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FormLoad.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FormLoad.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        FlatLightLaf.setup();
        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                FormLoad dialog = new FormLoad(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private gui.splashscreen.CurvesPanel curvesPanel1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel lbStatus;
    private gui.splashscreen.ProgressBarCustom pro;
    // End of variables declaration//GEN-END:variables
}
