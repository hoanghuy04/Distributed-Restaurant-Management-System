/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package gui.manager;

import bus.*;
import model.*;
import gui.FormLoad;
import gui.custom.TableDesign;

import java.rmi.RemoteException;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;
import model.enums.CustomerLevelEnum;
import model.enums.PromotionTypeEnum;
import raven.toast.Notifications;

/**
 *
 * @author ACER
 */
public class PromotionGUI extends javax.swing.JPanel {

    private TableDesign tableDesign;
    private TableColumnModel columnModel;
    private DefaultTableModel tableModel;
    private PromotionBUS proBUS;
    private PromotionDetailBUS proDetailBUS;
    private ItemBUS itemBUS;
    private PromotionEntity pro;
    private DialogVoucherDetail dialogVoucherDetail;
    private List<ItemEntity> items;
    private boolean isMouseClick = false;

    /**
     * Creates new form PromotionGUI
     */
    public PromotionGUI() throws RemoteException {
        proBUS = FormLoad.promotionBUS;
        proDetailBUS = FormLoad.promotionDetailBUS;
        itemBUS = FormLoad.itemBUS;
        pro = new PromotionEntity();
        dialogVoucherDetail = new DialogVoucherDetail(this);
        initComponents();
        txtId.setEditable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    private void customTable() throws RemoteException {
        String[] headers = {"Mã ưu đãi", "Ngày bắt đầu", "Ngày kết thúc", "Mô tả", "Chiết khấu",
            "giá tối thiểu", "Hạng", "Loại ưu đãi", "Hoạt động"};
        List<Integer> tableWidth = Arrays.asList(100, 100, 100, 100, 50, 50, 100, 50, 50);
        tableDesign = new TableDesign(headers, tableWidth);
        table = tableDesign.getTable();
        table.setRowHeight(50);
        tableModel = tableDesign.getModelTable();
        columnModel = tableDesign.getColumnModel();
        loadData();

    }

    private void loadData() throws RemoteException {
        tableModel.setRowCount(0);
        List<PromotionEntity> pros = proBUS.getListPromotionActive("True");

        for (PromotionEntity pro : pros) {
            tableModel.addRow(new Object[]{pro.getPromotionId(), pro.getStartedDate(), pro.getEndedDate(), pro.getDescription(),
                pro.getDiscountPercentage(), pro.getMinPrice(), pro.getCustomerLevels(),
                pro.getPromotionType().toString(), pro.isActive() ? "true" : "false"});
        }

    }

    private void clearData() throws RemoteException {
        if (items != null) {
            items.clear();
        }
        loadDialog();
        txtId.setText("");

        LocalDateTime dateTime = LocalDateTime.now();
        LocalDate dateS = dateTime.toLocalDate();
        DateTimeFormatter start = DateTimeFormatter.ofPattern("dd-MM-yyyy");
        txtStartDate.setText(dateS.format(start));
        txtEndDate.setText(dateS.format(start));
        txtDiscount.setText("");
        txtMinPrice.setText("");
        txtScrip.setText("");
        txtItem.setText("");
        cbbType.setSelectedIndex(0);
        chkActive.setSelected(false);
        chkNew.setSelected(false);
        chkPotential.setSelected(false);
        chkVip.setSelected(false);

    }

    private void loadDialog() throws RemoteException {
        dialogVoucherDetail.getTabCategory().removeAll();
        dialogVoucherDetail.addTabCategory();
        dialogVoucherDetail.getTabCategory().revalidate();
        dialogVoucherDetail.getTabCategory().repaint();
    }

    private PromotionEntity convertData() throws RemoteException {
        String proId = txtId.getText();
        String startDateStr = txtStartDate.getText();
        String endDateStr = txtEndDate.getText();
        DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern("dd-MM-yyyy HH:mm:ss");
        String startDateTimeStr = startDateStr + " 00:00:00";
        String endDateTimeStr = endDateStr + " 23:59:59";
        LocalDateTime startDate = null;
        LocalDateTime endDate = null;

        startDate = LocalDateTime.parse(startDateTimeStr, dateTimeFormatter);
        endDate = LocalDateTime.parse(endDateTimeStr, dateTimeFormatter);
        String scrip = txtScrip.getText();
        double discount = Double.parseDouble(txtDiscount.getText());
        double minPrice = Double.parseDouble(txtMinPrice.getText());
        List<CustomerLevelEnum> selectedRanks = new ArrayList<>();

        if (chkNew.isSelected()) {
            selectedRanks.add(CustomerLevelEnum.NEW);
        }
        if (chkPotential.isSelected()) {
            selectedRanks.add(CustomerLevelEnum.POTENTIAL);
        }
        if (chkVip.isSelected()) {
            selectedRanks.add(CustomerLevelEnum.VIP);
        }

        PromotionTypeEnum selectedType = PromotionTypeEnum.valueOf(cbbType.getSelectedItem().toString());
        PromotionEntity proNEW = new PromotionEntity(scrip, discount, startDate, endDate, true, null, selectedRanks, selectedType, minPrice);
        if (cbbType.getSelectedItem().toString().equals("ITEM")) {
            String itemIDsString = txtItem.getText();
            String[] itemIDs = itemIDsString.split(",");
            Set<PromotionDetailEntity> promotionDetails = new HashSet<>();
            for (String itemID : itemIDs) {
                itemID = itemID.trim();
                if (!itemID.isEmpty()) {
                    ItemEntity item = itemBUS.getEntityById(itemID);
                    PromotionDetailEntity promotionDetail = new PromotionDetailEntity(proNEW, item);
                    promotionDetails.add(promotionDetail);
                    item.setPromotionDetails(promotionDetails);
                }
            }
            proNEW.setPromotionDetails(promotionDetails);
        }
        return proNEW;
    }

    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() throws RemoteException {

        dateChooser1 = new gui.custom.datechooser.DateChooser();
        dateChooser2 = new gui.custom.datechooser.DateChooser();
        panelInfo = new javax.swing.JPanel();
        panelImgPro = new javax.swing.JPanel();
        lblImgPro = new javax.swing.JLabel();
        panelDetailInfo = new javax.swing.JPanel();
        lblStartDate = new javax.swing.JLabel();
        txtStartDate = new gui.custom.RoundedTextField();
        lblEndDate = new javax.swing.JLabel();
        txtEndDate = new gui.custom.RoundedTextField();
        lblScrip = new javax.swing.JLabel();
        txtScrip = new javax.swing.JTextField();
        lblId = new javax.swing.JLabel();
        txtId = new javax.swing.JTextField();
        lblMinPrice = new javax.swing.JLabel();
        txtMinPrice = new javax.swing.JTextField();
        lbDiscount = new javax.swing.JLabel();
        txtDiscount = new javax.swing.JTextField();
        lblType = new javax.swing.JLabel();
        lblRank = new javax.swing.JLabel();
        chkPotential = new javax.swing.JCheckBox();
        chkVip = new javax.swing.JCheckBox();
        chkActive = new javax.swing.JCheckBox();
        panelEdit = new javax.swing.JPanel();
        btnAdd = new gui.custom.RoundedButton();
        btnUpdate = new gui.custom.RoundedButton();
        btnSearch = new gui.custom.RoundedButton();
        btnSearch1 = new gui.custom.RoundedButton();
        chkNew = new javax.swing.JCheckBox();
        cbbType = new javax.swing.JComboBox<>();
        lblMinPrice1 = new javax.swing.JLabel();
        txtItem = new javax.swing.JTextField();
        panelTable = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();

        dateChooser1.setTextRefernce(txtStartDate);

        dateChooser2.setTextRefernce(txtEndDate);

        setLayout(new java.awt.BorderLayout());

        panelInfo.setLayout(new java.awt.BorderLayout());

        lblImgPro.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/icon/png/icons8-promotion-100.png"))); // NOI18N

        javax.swing.GroupLayout panelImgProLayout = new javax.swing.GroupLayout(panelImgPro);
        panelImgPro.setLayout(panelImgProLayout);
        panelImgProLayout.setHorizontalGroup(
            panelImgProLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelImgProLayout.createSequentialGroup()
                .addContainerGap(808, Short.MAX_VALUE)
                .addComponent(lblImgPro)
                .addContainerGap(809, Short.MAX_VALUE))
        );
        panelImgProLayout.setVerticalGroup(
            panelImgProLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelImgProLayout.createSequentialGroup()
                .addContainerGap(25, Short.MAX_VALUE)
                .addComponent(lblImgPro, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        panelInfo.add(panelImgPro, java.awt.BorderLayout.NORTH);

        lblStartDate.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        lblStartDate.setText("Ngày bắt đầu");
        lblStartDate.setPreferredSize(new java.awt.Dimension(100, 20));

        lblEndDate.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        lblEndDate.setText("Ngày kết thúc");
        lblEndDate.setPreferredSize(new java.awt.Dimension(100, 20));

        lblScrip.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        lblScrip.setText("Mô tả");
        lblScrip.setPreferredSize(new java.awt.Dimension(100, 20));

        txtScrip.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtScripActionPerformed(evt);
            }
        });

        lblId.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        lblId.setText("Mã khuyến mãi");
        lblId.setPreferredSize(new java.awt.Dimension(100, 20));

        lblMinPrice.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        lblMinPrice.setText("Giá tối thiểu");
        lblMinPrice.setPreferredSize(new java.awt.Dimension(100, 20));

        lbDiscount.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        lbDiscount.setText("Chiết khấu");
        lbDiscount.setPreferredSize(new java.awt.Dimension(100, 20));

        lblType.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        lblType.setText("Loại khuyến mãi");
        lblType.setPreferredSize(new java.awt.Dimension(100, 20));

        lblRank.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        lblRank.setText("Hạng");
        lblRank.setPreferredSize(new java.awt.Dimension(100, 20));

        chkPotential.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        chkPotential.setText("POTENTIAL");
        chkPotential.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkPotentialActionPerformed(evt);
            }
        });

        chkVip.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        chkVip.setText("VIP");
        chkVip.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkVipActionPerformed(evt);
            }
        });

        chkActive.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        chkActive.setText("Hoạt động");
        chkActive.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkActiveActionPerformed(evt);
            }
        });

        btnAdd.setText("Thêm");
        btnAdd.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btnAdd.setPreferredSize(new java.awt.Dimension(100, 50));
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
                    btnAddActionPerformed(evt);
                } catch (RemoteException e) {
                    throw new RuntimeException(e);
                }
            }
        });
        panelEdit.add(btnAdd);

        btnUpdate.setText("Cập nhật");
        btnUpdate.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btnUpdate.setPreferredSize(new java.awt.Dimension(150, 50));
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
                    btnUpdateActionPerformed(evt);
                } catch (RemoteException e) {
                    throw new RuntimeException(e);
                }
            }
        });
        panelEdit.add(btnUpdate);

        btnSearch.setText("Tìm kiếm");
        btnSearch.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btnSearch.setPreferredSize(new java.awt.Dimension(150, 50));
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
                    btnSearchActionPerformed(evt);
                } catch (RemoteException e) {
                    throw new RuntimeException(e);
                }
            }
        });
        panelEdit.add(btnSearch);

        btnSearch1.setText("Xóa trắng");
        btnSearch1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btnSearch1.setPreferredSize(new java.awt.Dimension(150, 50));
        btnSearch1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
                    btnSearch1ActionPerformed(evt);
                } catch (RemoteException e) {
                    throw new RuntimeException(e);
                }
            }
        });
        panelEdit.add(btnSearch1);

        chkNew.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        chkNew.setText("NEW");
        chkNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkNewActionPerformed(evt);
            }
        });

        cbbType.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        cbbType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "ORDER", "ITEM" }));
        cbbType.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbbTypeItemStateChanged(evt);
            }
        });
        cbbType.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                try {
                    cbbTypeMouseClicked(evt);
                } catch (RemoteException e) {
                    throw new RuntimeException(e);
                }
            }
        });
        cbbType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
                    cbbTypeActionPerformed(evt);
                } catch (RemoteException e) {
                    throw new RuntimeException(e);
                }
            }
        });

        lblMinPrice1.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        lblMinPrice1.setText("Tên sản phẩm");
        lblMinPrice1.setPreferredSize(new java.awt.Dimension(100, 20));

        txtItem.setEditable(false);
        txtItem.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                try {
                    txtItemMouseClicked(evt);
                } catch (RemoteException e) {
                    throw new RuntimeException(e);
                }
            }
        });

        javax.swing.GroupLayout panelDetailInfoLayout = new javax.swing.GroupLayout(panelDetailInfo);
        panelDetailInfo.setLayout(panelDetailInfoLayout);
        panelDetailInfoLayout.setHorizontalGroup(
            panelDetailInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelDetailInfoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelDetailInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelDetailInfoLayout.createSequentialGroup()
                        .addGap(0, 478, Short.MAX_VALUE)
                        .addGroup(panelDetailInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelDetailInfoLayout.createSequentialGroup()
                                .addGroup(panelDetailInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(panelDetailInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(txtDiscount, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, panelDetailInfoLayout.createSequentialGroup()
                                            .addComponent(lblScrip, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(txtScrip, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(panelDetailInfoLayout.createSequentialGroup()
                                        .addComponent(lblStartDate, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(txtStartDate, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txtId, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelDetailInfoLayout.createSequentialGroup()
                                .addGroup(panelDetailInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lbDiscount, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(panelDetailInfoLayout.createSequentialGroup()
                                        .addComponent(lblRank, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(chkNew)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(chkPotential)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(chkVip))
                                    .addComponent(chkActive))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                                .addGroup(panelDetailInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(panelDetailInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(panelDetailInfoLayout.createSequentialGroup()
                                            .addComponent(lblMinPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(txtMinPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(panelDetailInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addGroup(panelDetailInfoLayout.createSequentialGroup()
                                                .addComponent(lblEndDate, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(txtEndDate, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addComponent(lblId, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelDetailInfoLayout.createSequentialGroup()
                                                .addComponent(lblType, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(cbbType, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                                    .addGroup(panelDetailInfoLayout.createSequentialGroup()
                                        .addComponent(lblMinPrice1, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(txtItem, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addGap(0, 481, Short.MAX_VALUE))
                    .addComponent(panelEdit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        panelDetailInfoLayout.setVerticalGroup(
            panelDetailInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelDetailInfoLayout.createSequentialGroup()
                .addContainerGap(58, Short.MAX_VALUE)
                .addGroup(panelDetailInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtStartDate, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblStartDate, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
                    .addComponent(lblEndDate, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
                    .addComponent(txtEndDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(5, 5, 5)
                .addGroup(panelDetailInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblId, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtId, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblScrip, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtScrip, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5)
                .addGroup(panelDetailInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblMinPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtMinPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbDiscount, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtDiscount, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(panelDetailInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(panelDetailInfoLayout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addGroup(panelDetailInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(chkVip, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(panelDetailInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(lblType, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(chkPotential, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(lblRank, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(chkNew, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(panelDetailInfoLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbbType)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelDetailInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(chkActive, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(panelDetailInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblMinPrice1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtItem, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(panelEdit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        chkActive.getAccessibleContext().setAccessibleDescription("");

        panelInfo.add(panelDetailInfo, java.awt.BorderLayout.CENTER);

        add(panelInfo, java.awt.BorderLayout.NORTH);

        customTable();
        table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                try {
                    tableMouseClicked(evt);
                } catch (RemoteException e) {
                    throw new RuntimeException(e);
                }
            }
        });
        jScrollPane1.setViewportView(table);

        javax.swing.GroupLayout panelTableLayout = new javax.swing.GroupLayout(panelTable);
        panelTable.setLayout(panelTableLayout);
        panelTableLayout.setHorizontalGroup(
            panelTableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1717, Short.MAX_VALUE)
            .addGroup(panelTableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(panelTableLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1693, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        panelTableLayout.setVerticalGroup(
            panelTableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 213, Short.MAX_VALUE)
            .addGroup(panelTableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 213, Short.MAX_VALUE))
        );

        add(panelTable, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void txtScripActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtScripActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtScripActionPerformed

    private void chkPotentialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkPotentialActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chkPotentialActionPerformed

    private void chkActiveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkActiveActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chkActiveActionPerformed

    private void chkVipActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkVipActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chkVipActionPerformed

    private void chkNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkNewActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chkNewActionPerformed

    private void btnSearch1ActionPerformed(java.awt.event.ActionEvent evt) throws RemoteException {//GEN-FIRST:event_btnSearch1ActionPerformed
        clearData();
    }//GEN-LAST:event_btnSearch1ActionPerformed

    private void tableMouseClicked(java.awt.event.MouseEvent evt) throws RemoteException {//GEN-FIRST:event_tableMouseClicked
        items = new ArrayList<>();
        int selectedRow = table.getSelectedRow();
        if (selectedRow == -1) {
            return;
        }
        pro = proBUS.getEntityById(table.getValueAt(selectedRow, 0).toString());
        String type = table.getValueAt(selectedRow, 7).toString();
        if (type.equals("ITEM")) {
            Set<PromotionDetailEntity> promotionDetails = pro.getPromotionDetails();
            StringBuilder itemCodes = new StringBuilder();
            if (promotionDetails != null && !promotionDetails.isEmpty()) {
                for (PromotionDetailEntity detail : promotionDetails) {
                    itemCodes.append(detail.getItem().getItemId()).append(",");
                    items.add(detail.getItem());
                }
                txtItem.setText(itemCodes.toString().substring(0, itemCodes.toString().length() - 1));
            }
        } else {
            txtItem.setText("");
        }

        String id = table.getValueAt(selectedRow, 0).toString();
        String startDate = table.getValueAt(selectedRow, 1).toString();
        String endDate = table.getValueAt(selectedRow, 2).toString();
        String scrip = table.getValueAt(selectedRow, 3).toString();
        String discount = table.getValueAt(selectedRow, 4).toString();
        String minPrice = table.getValueAt(selectedRow, 5).toString();
        String rank = table.getValueAt(selectedRow, 6).toString();

        String active = table.getValueAt(selectedRow, 8).toString();

        LocalDateTime dateTime = LocalDateTime.parse(startDate);
        LocalDate dateS = dateTime.toLocalDate(); // Chuyển đổi thành LocalDate
        DateTimeFormatter start = DateTimeFormatter.ofPattern("dd-MM-yyyy");
        LocalDateTime dateTimee = LocalDateTime.parse(endDate);
        LocalDate dateE = dateTimee.toLocalDate(); // Chuyển đổi thành LocalDate
        DateTimeFormatter end = DateTimeFormatter.ofPattern("dd-MM-yyyy");

        txtId.setText(id);
        txtStartDate.setText(dateS.format(start));
        txtEndDate.setText(dateE.format(end));
        txtScrip.setText(scrip);
        txtDiscount.setText(discount);
        txtMinPrice.setText(minPrice);

        String cleanRank = rank.replaceAll("[\\[\\]]", "").trim();
        String[] ranksArray = cleanRank.split(",\\s*");
        chkNew.setSelected(false);
        chkPotential.setSelected(false);
        chkVip.setSelected(false);
        for (String r : ranksArray) {
            switch (r.trim().toUpperCase()) {
                case "NEW":
                    chkNew.setSelected(true);
                    break;
                case "POTENTIAL":
                    chkPotential.setSelected(true);
                    break;
                case "VIP":
                    chkVip.setSelected(true);
                    break;
                default:
                    break;
            }
        }

        if (active.equals("true")) {
            chkActive.setSelected(true);
        } else {
            chkActive.setSelected(false);
        }
        isMouseClick = false;
        cbbType.setSelectedItem(type);
        loadDialog();

    }//GEN-LAST:event_tableMouseClicked

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) throws RemoteException {//GEN-FIRST:event_btnAddActionPerformed
        if (validData()) {
            PromotionEntity proNEW = convertData();
            proBUS.insertEntity(proNEW);
            if (proNEW.getPromotionDetails() != null) {
                proNEW.getPromotionDetails().forEach(x -> {
                    try {
                        proDetailBUS.insertEntity(x);
                    } catch (RemoteException e) {
                        throw new RuntimeException(e);
                    }
                });
                proNEW.setPromotionDetails(proNEW.getPromotionDetails());
                proBUS.updateEntity(proNEW);

            }
            tableModel.addRow(new Object[]{proNEW.getPromotionId(), proNEW.getStartedDate(), proNEW.getEndedDate(), proNEW.getDescription(),
                proNEW.getDiscountPercentage(), proNEW.getMinPrice(), proNEW.getCustomerLevels(),
                proNEW.getPromotionType().toString(), proNEW.isActive() ? "true" : "false"});
            JOptionPane.showMessageDialog(this, "Thêm thành công");
            clearData();
        }


    }//GEN-LAST:event_btnAddActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) throws RemoteException {//GEN-FIRST:event_btnUpdateActionPerformed
        int row = table.getSelectedRow();
        if (row == -1) {
            return;
        }
        pro = proBUS.getEntityById(table.getValueAt(row, 0).toString());

        String startDateStr = txtStartDate.getText();
        String endDateStr = txtEndDate.getText();
        DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern("dd-MM-yyyy HH:mm:ss");
        String startDateTimeStr = startDateStr + " 00:00:00";
        String endDateTimeStr = endDateStr + " 23:59:59";
        LocalDateTime startDate = null;
        LocalDateTime endDate = null;

        startDate = LocalDateTime.parse(startDateTimeStr, dateTimeFormatter);
        endDate = LocalDateTime.parse(endDateTimeStr, dateTimeFormatter);
        pro.setDescription(txtScrip.getText());
        pro.setDiscountPercentage(Double.parseDouble(txtDiscount.getText()));
        pro.setMinPrice(Double.parseDouble(txtMinPrice.getText()));
        pro.setActive(chkActive.isSelected());
        List<CustomerLevelEnum> selectedRanks = new ArrayList<>();

        if (chkNew.isSelected()) {
            selectedRanks.add(CustomerLevelEnum.NEW);
        }
        if (chkPotential.isSelected()) {
            selectedRanks.add(CustomerLevelEnum.POTENTIAL);
        }
        if (chkVip.isSelected()) {
            selectedRanks.add(CustomerLevelEnum.VIP);
        }
        pro.setCustomerLevels(selectedRanks);

        PromotionTypeEnum selectedType = PromotionTypeEnum.valueOf(cbbType.getSelectedItem().toString());
        if (pro.getPromotionDetails() != null) {
            pro.getPromotionDetails().forEach(x -> {
                try {
                    proDetailBUS.deleteEntity(new PromotionDetailId(x.getPromotion().getPromotionId(), x.getItem().getItemId()));
                } catch (RemoteException e) {
                    throw new RuntimeException(e);
                }
            });
            pro.setPromotionDetails(null);
            proBUS.updateEntity(pro);
        }
        if (cbbType.getSelectedItem().toString().equals("ITEM")) {
            String itemIDsString = txtItem.getText();
            String[] itemIDs = itemIDsString.split(",");
            Set<PromotionDetailEntity> promotionDetails = new HashSet<>();
            ItemEntity item = null;
            pro.setPromotionDetails(null);
            for (String itemID : itemIDs) {
                item = itemBUS.getEntityById(itemID);
                PromotionDetailEntity promotionDetail = new PromotionDetailEntity(pro, item);
                proDetailBUS.insertEntity(promotionDetail);
                promotionDetails.add(promotionDetail);
            }
            item.setPromotionDetails(promotionDetails);
            itemBUS.updateEntity(item);
            pro.setPromotionDetails(promotionDetails);
        }
        proBUS.updateEntity(pro);

        int selectedRow = table.getSelectedRow();
        if (selectedRow != -1) {

            tableModel.setValueAt(pro.getStartedDate(), selectedRow, 1);
            tableModel.setValueAt(pro.getEndedDate(), selectedRow, 2);
            tableModel.setValueAt(pro.getDescription(), selectedRow, 3);
            tableModel.setValueAt(pro.getDiscountPercentage(), selectedRow, 4);
            tableModel.setValueAt(pro.getMinPrice(), selectedRow, 5);
            tableModel.setValueAt(pro.getCustomerLevels(), selectedRow, 6);
            tableModel.setValueAt(pro.getPromotionType(), selectedRow, 7);
            tableModel.setValueAt(pro.isActive() ? "true" : "false", selectedRow, 8);
            JOptionPane.showMessageDialog(null, "Cập nhật thành công");
        } else {
            JOptionPane.showMessageDialog(null, "Vui lòng chọn một hàng để cập nhật");
        }

    }//GEN-LAST:event_btnUpdateActionPerformed

    private void cbbTypeActionPerformed(java.awt.event.ActionEvent evt) throws RemoteException {//GEN-FIRST:event_cbbTypeActionPerformed
        if (cbbType.getSelectedItem().toString().equals("ITEM")) {
            this.items = new ArrayList<>();
            for (String itemId : txtItem.getText().trim().split(",")) {
                if (!itemId.trim().isEmpty()) {
                    this.items.add(new ItemEntity(itemId));
                }
            }
            loadDialog();
            if (isMouseClick) {
                dialogVoucherDetail.setVisible(true);
            }
            isMouseClick = true;

            chkNew.setSelected(true);
            chkPotential.setSelected(true);
            chkVip.setSelected(true);
        }

    }//GEN-LAST:event_cbbTypeActionPerformed

    private void txtItemMouseClicked(java.awt.event.MouseEvent evt) throws RemoteException {//GEN-FIRST:event_txtItemMouseClicked
        cbbTypeActionPerformed(null);
    }//GEN-LAST:event_txtItemMouseClicked

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) throws RemoteException {//GEN-FIRST:event_btnSearchActionPerformed
        String scrip = txtScrip.getText();
        Double discount = null;
        String discountText = txtDiscount.getText();
        if (!discountText.isEmpty()) {
            discount = Double.valueOf(txtDiscount.getText());
        }

        Double minPrice = null;
        String minPriceText = txtMinPrice.getText();
        if (!minPriceText.isEmpty()) {
            minPrice = Double.valueOf(txtMinPrice.getText());
        }
        boolean active = chkActive.isSelected();

        List<CustomerLevelEnum> selectedRanks = new ArrayList<>();
        if (chkNew.isSelected()) {
            selectedRanks.add(CustomerLevelEnum.NEW);
        }
        if (chkPotential.isSelected()) {
            selectedRanks.add(CustomerLevelEnum.POTENTIAL);
        }
        if (chkVip.isSelected()) {
            selectedRanks.add(CustomerLevelEnum.VIP);
        }
        String ranks = selectedRanks.stream()
                .map(Enum::name)
                .collect(Collectors.joining(","));

        LocalDateTime startDate = null;
        LocalDateTime endDate = null;
        LocalDate startedDate = LocalDate.parse(txtStartDate.getText(), DateTimeFormatter.ofPattern("dd-MM-yyyy"));
        LocalDate endedDate = LocalDate.parse(txtEndDate.getText(), DateTimeFormatter.ofPattern("dd-MM-yyyy"));
        if (startedDate.isAfter(endedDate)) {
            Notifications.getInstance().show(
                    Notifications.Type.WARNING,
                    Notifications.Location.TOP_RIGHT,
                    10000,
                    "Thông báo: Vui lòng chọn ngày bắt đầu sau ngày hiện tại.");
        } else {
            startDate = startedDate.atStartOfDay(); // 00:00:00
            endDate = endedDate.atTime(23, 59, 59, 999999999); // 23:59:59.999999999
        }

//        JOptionPane.showMessageDialog(this,startDate);
        PromotionTypeEnum selectedType = PromotionTypeEnum.valueOf(cbbType.getSelectedItem().toString());

        tableModel.setRowCount(0);
        List<PromotionEntity> pros = proBUS.getPromotionsWithKeywordfit(startDate, endDate, scrip, discount, minPrice, ranks, selectedType, active);
//        JOptionPane.showMessageDialog(this,pros);

        if (pros.isEmpty()) {
            pros = proBUS.getAllEntities();
            JOptionPane.showMessageDialog(this, "Không tìm thấy khuyến mãi nào");
        }
        for (PromotionEntity pro : pros) {

            tableModel.addRow(new Object[]{pro.getPromotionId(), pro.getStartedDate(), pro.getEndedDate(), pro.getDescription(),
                pro.getDiscountPercentage(), pro.getMinPrice(), pro.getCustomerLevels(),
                pro.getPromotionType().toString(), pro.isActive() ? "true" : "false"});
        }

    }//GEN-LAST:event_btnSearchActionPerformed

    private void cbbTypeMouseClicked(java.awt.event.MouseEvent evt) throws RemoteException {//GEN-FIRST:event_cbbTypeMouseClicked
        if (cbbType.getSelectedItem().toString().equals("ITEM")) {
            this.items = new ArrayList<>();
            for (String itemId : txtItem.getText().trim().split(",")) {
                if (!itemId.trim().isEmpty()) {
                    this.items.add(new ItemEntity(itemId));
                }
            }
            loadDialog();
            dialogVoucherDetail.setVisible(true);
        }
    }//GEN-LAST:event_cbbTypeMouseClicked

    private void cbbTypeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbbTypeItemStateChanged

    }//GEN-LAST:event_cbbTypeItemStateChanged

    public List<ItemEntity> getItems() {
        return items;
    }

    public void setItems(List<ItemEntity> items) {
        this.items = items;
    }

    public JTextField getTxtItem() {
        return txtItem;
    }

    public void setTxtItem(JTextField txtItem) {
        this.txtItem = txtItem;
    }

    public DialogVoucherDetail getDialogVoucherDetail() {
        return dialogVoucherDetail;
    }

    public void setDialogVoucherDetail(DialogVoucherDetail dialogVoucherDetail) {
        this.dialogVoucherDetail = dialogVoucherDetail;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private gui.custom.RoundedButton btnAdd;
    private gui.custom.RoundedButton btnSearch;
    private gui.custom.RoundedButton btnSearch1;
    private gui.custom.RoundedButton btnUpdate;
    private javax.swing.JComboBox<String> cbbType;
    private javax.swing.JCheckBox chkActive;
    private javax.swing.JCheckBox chkNew;
    private javax.swing.JCheckBox chkPotential;
    private javax.swing.JCheckBox chkVip;
    private gui.custom.datechooser.DateChooser dateChooser1;
    private gui.custom.datechooser.DateChooser dateChooser2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lbDiscount;
    private javax.swing.JLabel lblEndDate;
    private javax.swing.JLabel lblId;
    private javax.swing.JLabel lblImgPro;
    private javax.swing.JLabel lblMinPrice;
    private javax.swing.JLabel lblMinPrice1;
    private javax.swing.JLabel lblRank;
    private javax.swing.JLabel lblScrip;
    private javax.swing.JLabel lblStartDate;
    private javax.swing.JLabel lblType;
    private javax.swing.JPanel panelDetailInfo;
    private javax.swing.JPanel panelEdit;
    private javax.swing.JPanel panelImgPro;
    private javax.swing.JPanel panelInfo;
    private javax.swing.JPanel panelTable;
    private javax.swing.JTable table;
    private javax.swing.JTextField txtDiscount;
    private gui.custom.RoundedTextField txtEndDate;
    private javax.swing.JTextField txtId;
    private javax.swing.JTextField txtItem;
    private javax.swing.JTextField txtMinPrice;
    private javax.swing.JTextField txtScrip;
    private gui.custom.RoundedTextField txtStartDate;
    // End of variables declaration//GEN-END:variables

    private boolean validData() {
        LocalDate started = LocalDate.parse(txtStartDate.getText(), DateTimeFormatter.ofPattern("dd-MM-yyyy"));
        LocalDate ended = LocalDate.parse(txtEndDate.getText(), DateTimeFormatter.ofPattern("dd-MM-yyyy"));
        if (started.isAfter(ended)) {
            Notifications.getInstance().show(
                    Notifications.Type.WARNING,
                    Notifications.Location.TOP_RIGHT,
                    10000,
                    "Thông báo: Vui lòng chọn ngày bắt đầu lớn hơn hoặc bằng ngày kết thúc");
            return false;
        } else {
            LocalDateTime start = started.atStartOfDay(); // 00:00:00
            LocalDateTime end = ended.atTime(23, 59, 59, 999999999); // 23:59:59.999999999
        }

        String dis = txtDiscount.getText();
        String min = txtMinPrice.getText();
        List<CustomerLevelEnum> selectedRanks = new ArrayList<>();

        if (chkNew.isSelected()) {
            selectedRanks.add(CustomerLevelEnum.NEW);
        }
        if (chkPotential.isSelected()) {
            selectedRanks.add(CustomerLevelEnum.POTENTIAL);
        }
        if (chkVip.isSelected()) {
            selectedRanks.add(CustomerLevelEnum.VIP);
        }

        double discoun = 0;
        if (!dis.trim().equals("")) {
            try {
                discoun = Double.parseDouble(dis);
                if (discoun <= 0) {
                    JOptionPane.showMessageDialog(null, "Giảm giá là số lớn hơn 0");
                    return false;
                }
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Giảm giá phải là số");
                return false;
            }
        } else {
            JOptionPane.showMessageDialog(null, "Giảm giá không được để rỗng");
            return false;
        }

        double minPrice = 0;
        if (!min.trim().equals("")) {
            try {
                minPrice = Double.parseDouble(dis);
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Giá tối thiểu phải là số");
                return false;
            }
        } else {
            JOptionPane.showMessageDialog(null, "Giá tối thiểu không được để rỗng");
            return false;
        }

        if (selectedRanks.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Vui lòng chọn hạng thành viên");
            return false;
        }
        return true;
    }
}
