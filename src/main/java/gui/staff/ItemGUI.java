/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package gui.staff;

import bus.CategoryBUS;
import bus.ItemBUS;
import common.Constants;
import model.CategoryEntity;
import model.ItemEntity;
import gui.FormLoad;
import gui.custom.TableDesign;
import java.awt.Image;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.StandardCopyOption;
import java.rmi.RemoteException;
import java.util.Arrays;
import java.util.List;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;
import raven.toast.Notifications;
import util.ResizeImage;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.ss.util.CellRangeAddress;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import util.DatetimeFormatterUtil;

/**
 *
 * @author pc
 */
public class ItemGUI extends javax.swing.JPanel {

    private String imgPath;
    private ItemEntity i;

    private TableDesign tableDesign;
    private String[] headers;
    private List<Integer> tableWidth;
    private DefaultTableModel defaultTableModel;
    private TableColumnModel columnModel;

    private CategoryBUS categoryBUS;
    private ItemBUS itemBUS;

    /**
     * Creates new form ItemGUI
     */
    public ItemGUI() throws Exception {
        initComponents();
        this.i = new ItemEntity();
    }

    private void customTable() throws Exception {
        headers = new String[]{"Mã", "Tên", "Nhóm hàng", "Giá vốn", "Giá bán", "Số lượng", "Trạng thái", "Ảnh", "Mô tả"};
        tableWidth = Arrays.asList(100, 100, 100, 100, 100, 100, 100, 200, 200);
        this.tableDesign = new TableDesign(headers, tableWidth);
        table = tableDesign.getTable();
        this.defaultTableModel = tableDesign.getModelTable();
        table.setModel(defaultTableModel);

        this.columnModel = tableDesign.getColumnModel();
        table.setColumnModel(columnModel);

        this.categoryBUS = FormLoad.categoryBUS;
        this.itemBUS = FormLoad.itemBUS;
        loadData();

    }

    private void loadData() throws Exception {
        categoryBUS.getAllEntities().stream()
                .forEach(c -> {
                    cbbCategory.addItem(c.getName());
                });

        itemBUS.getAllEntities().stream()
                .forEach(i -> {
                    FillOneRow(i);
                });
    }

    private void clear() {
        txtName.setText("");
        txtCostPrice.setText("");
        txtSellingPrice.setText("");
        txtStockQty.setText("");
        txtDesc.setText("");
        cbbCategory.setSelectedIndex(0);
        cbStatus.setSelected(false);
        lblImg.setIcon(null);
    }

    private void FillOneRow(ItemEntity itemEntity) {
        this.defaultTableModel.addRow(new Object[]{
            itemEntity.getItemId(),
            itemEntity.getName(),
            itemEntity.getCategory().getName(),
            itemEntity.getCostPrice() + "",
            itemEntity.getSellingPrice() + "",
            itemEntity.getStockQuantity() + "",
            itemEntity.isActive() ? "true" : "false",
            itemEntity.getImg(),
            itemEntity.getDescription()
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() throws Exception {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        btnImport = new gui.custom.RoundedButton();
        jLabel1 = new javax.swing.JLabel();
        btnExport = new gui.custom.RoundedButton();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        panelImg = new gui.custom.RoundedPanel();
        lblImg = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtName = new gui.custom.RoundedTextField();
        cbbCategory = new gui.custom.RoundedComboBox();
        jLabel9 = new javax.swing.JLabel();
        cbStatus = new javax.swing.JCheckBox();
        jPanel10 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtDesc = new gui.custom.RoundedTextArea();
        jPanel7 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        txtCostPrice = new gui.custom.RoundedTextField();
        jLabel7 = new javax.swing.JLabel();
        txtSellingPrice = new gui.custom.RoundedTextField();
        jLabel8 = new javax.swing.JLabel();
        txtStockQty = new gui.custom.RoundedTextField();
        jPanel11 = new javax.swing.JPanel();
        jPanel12 = new javax.swing.JPanel();
        jPanel13 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        btnAdd = new gui.custom.RoundedButton();
        btnUpdate = new gui.custom.RoundedButton();
        btnSearch = new gui.custom.RoundedButton();
        btnClear = new gui.custom.RoundedButton();
        jPanel16 = new javax.swing.JPanel();
        jPanel21 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        jPanel20 = new javax.swing.JPanel();

        setPreferredSize(new java.awt.Dimension(1600, 839));
        setLayout(new java.awt.BorderLayout());

        jPanel1.setPreferredSize(new java.awt.Dimension(1600, 876));
        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel2.setBackground(new java.awt.Color(204, 204, 204));

        btnImport.setBackground(new java.awt.Color(0, 153, 51));
        btnImport.setForeground(new java.awt.Color(255, 255, 255));
        btnImport.setIcon(new ImageIcon(getClass().getResource("/img/icon/png/excel_icon.png"))); // NOI18N
        btnImport.setText("Import");
        btnImport.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnImport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImportActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setText("Thông tin đồ dùng");

        btnExport.setBackground(new java.awt.Color(0, 153, 51));
        btnExport.setForeground(new java.awt.Color(255, 255, 255));
        btnExport.setIcon(new ImageIcon(getClass().getResource("/img/icon/png/excel_icon.png"))); // NOI18N
        btnExport.setText("Export");
        btnExport.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnExport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 1063, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 394, Short.MAX_VALUE)
                .addComponent(btnImport, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(btnExport, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnExport, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnImport, javax.swing.GroupLayout.PREFERRED_SIZE, 46, Short.MAX_VALUE))
                .addGap(0, 4, Short.MAX_VALUE))
        );

        jPanel1.add(jPanel2, java.awt.BorderLayout.NORTH);

        panelImg.setBackground(new java.awt.Color(255, 255, 255));

        lblImg.setBackground(new java.awt.Color(204, 204, 204));
        lblImg.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        lblImg.setForeground(new java.awt.Color(153, 153, 153));
        lblImg.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblImg.setText("Chọn ảnh");
        lblImg.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblImgMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout panelImgLayout = new javax.swing.GroupLayout(panelImg);
        panelImg.setLayout(panelImgLayout);
        panelImgLayout.setHorizontalGroup(
            panelImgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblImg, javax.swing.GroupLayout.DEFAULT_SIZE, 154, Short.MAX_VALUE)
        );
        panelImgLayout.setVerticalGroup(
            panelImgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblImg, javax.swing.GroupLayout.DEFAULT_SIZE, 142, Short.MAX_VALUE)
        );

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel3.setText("Tên hàng");
        jLabel3.setPreferredSize(new java.awt.Dimension(80, 40));

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel4.setText("Nhóm hàng");
        jLabel4.setPreferredSize(new java.awt.Dimension(80, 40));

        txtName.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        txtName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNameActionPerformed(evt);
            }
        });

        cbbCategory.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N

        jLabel9.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel9.setText("Trạng thái hoạt động");
        jLabel9.setPreferredSize(new java.awt.Dimension(80, 40));

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 30, Short.MAX_VALUE)
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 112, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(panelImg, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cbbCategory, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbStatus)
                        .addGap(0, 618, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel5Layout.createSequentialGroup()
                            .addGap(18, 18, 18)
                            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(cbbCategory, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(6, 6, 6)
                            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                                    .addComponent(cbStatus)
                                    .addGap(8, 8, 8))))
                        .addGroup(jPanel5Layout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(panelImg, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel5.setText("Mô tả chi tiết");
        jLabel5.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        jLabel5.setPreferredSize(new java.awt.Dimension(80, 40));

        txtDesc.setColumns(20);
        txtDesc.setRows(5);
        txtDesc.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jScrollPane2.setViewportView(txtDesc);

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 1479, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(88, 88, 88))
            .addComponent(jScrollPane2)
        );

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel6.setText("Giá vốn");
        jLabel6.setPreferredSize(new java.awt.Dimension(80, 40));

        txtCostPrice.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        txtCostPrice.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtCostPriceKeyReleased(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel7.setText("Giá bán");
        jLabel7.setPreferredSize(new java.awt.Dimension(80, 40));

        txtSellingPrice.setEditable(false);
        txtSellingPrice.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N

        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel8.setText("Tồn kho");
        jLabel8.setPreferredSize(new java.awt.Dimension(80, 40));

        txtStockQty.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 30, Short.MAX_VALUE)
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 112, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtStockQty, javax.swing.GroupLayout.DEFAULT_SIZE, 555, Short.MAX_VALUE))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtCostPrice, javax.swing.GroupLayout.DEFAULT_SIZE, 555, Short.MAX_VALUE)
                            .addComponent(txtSellingPrice, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGap(70, 70, 70)
                .addComponent(jPanel11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(jPanel11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtCostPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtSellingPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtStockQty, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 30, Short.MAX_VALUE)
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel13Layout = new javax.swing.GroupLayout(jPanel13);
        jPanel13.setLayout(jPanel13Layout);
        jPanel13Layout.setHorizontalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 30, Short.MAX_VALUE)
        );
        jPanel13Layout.setVerticalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 112, Short.MAX_VALUE)
        );

        btnAdd.setText("Thêm");
        btnAdd.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btnAdd.setPreferredSize(new java.awt.Dimension(100, 50));
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
                    btnAddActionPerformed(evt);
                } catch (Exception e) {
                    throw new RuntimeException(e);
                }
            }
        });
        jPanel8.add(btnAdd);

        btnUpdate.setText("Cập nhật");
        btnUpdate.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btnUpdate.setPreferredSize(new java.awt.Dimension(150, 50));
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });
        jPanel8.add(btnUpdate);

        btnSearch.setText("Tìm kiếm");
        btnSearch.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btnSearch.setPreferredSize(new java.awt.Dimension(150, 50));
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
                    btnSearchActionPerformed(evt);
                } catch (Exception e) {
                    throw new RuntimeException(e);
                }
            }
        });
        jPanel8.add(btnSearch);

        btnClear.setText("Xóa trắng");
        btnClear.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btnClear.setPreferredSize(new java.awt.Dimension(150, 50));
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
                    btnClearActionPerformed(evt);
                } catch (Exception e) {
                    throw new RuntimeException(e);
                }
            }
        });
        jPanel8.add(btnClear);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jPanel13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, 1645, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, 653, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(152, 152, 152)
                .addComponent(jPanel12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, 1681, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel16.setLayout(new javax.swing.BoxLayout(jPanel16, javax.swing.BoxLayout.LINE_AXIS));

        jPanel21.setMaximumSize(new java.awt.Dimension(30, 30));
        jPanel21.setPreferredSize(new java.awt.Dimension(30, 30));

        javax.swing.GroupLayout jPanel21Layout = new javax.swing.GroupLayout(jPanel21);
        jPanel21.setLayout(jPanel21Layout);
        jPanel21Layout.setHorizontalGroup(
            jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 30, Short.MAX_VALUE)
        );
        jPanel21Layout.setVerticalGroup(
            jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 30, Short.MAX_VALUE)
        );

        jPanel16.add(jPanel21);

        customTable();
        table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                try {
                    tableMouseClicked(evt);
                } catch (RemoteException e) {
                    throw new RuntimeException(e);
                }
            }
        });
        jScrollPane3.setViewportView(table);

        jPanel16.add(jScrollPane3);

        jPanel20.setMaximumSize(new java.awt.Dimension(30, 30));
        jPanel20.setPreferredSize(new java.awt.Dimension(20, 30));

        javax.swing.GroupLayout jPanel20Layout = new javax.swing.GroupLayout(jPanel20);
        jPanel20.setLayout(jPanel20Layout);
        jPanel20Layout.setHorizontalGroup(
            jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 20, Short.MAX_VALUE)
        );
        jPanel20Layout.setVerticalGroup(
            jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 30, Short.MAX_VALUE)
        );

        jPanel16.add(jPanel20);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 1696, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel16, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 0, 0))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jPanel16, javax.swing.GroupLayout.PREFERRED_SIZE, 427, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1.add(jPanel3, java.awt.BorderLayout.CENTER);

        add(jPanel1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void txtNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNameActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        try {
            i.setName(txtName.getText());
            i.setCategory(categoryBUS.findByName(cbbCategory.getSelectedItem().toString()));
            i.setCostPrice(Double.parseDouble(txtCostPrice.getText()));
            i.setStockQuantity(Integer.parseInt(txtStockQty.getText()));
            i.setDescription(txtDesc.getText().trim());
            i.setActive(cbStatus.isSelected());
            i.setImg(this.imgPath);
            
            itemBUS.updateEntity(i);
            // Cập nhật vào bảng
            int selectedRow = table.getSelectedRow(); // Lấy hàng được chọn
            if (selectedRow != -1) { // Nếu có hàng nào đang được chọn
                DefaultTableModel model = (DefaultTableModel) table.getModel();
                
                // Cập nhật các giá trị của hàng theo các cột tương ứng
                model.setValueAt(i.getItemId(), selectedRow, 0);
                model.setValueAt(i.getName(), selectedRow, 1);
                model.setValueAt(i.getCategory().getName(), selectedRow, 2);
                model.setValueAt(i.getCostPrice() + "", selectedRow, 3);
                model.setValueAt(i.getSellingPrice() + "", selectedRow, 4);
                model.setValueAt(i.getStockQuantity() + "", selectedRow, 5);
                model.setValueAt(i.isActive() ? "true" : "false", selectedRow, 6);
                model.setValueAt(i.getImg(), selectedRow, 7);
                model.setValueAt(i.getDescription(), selectedRow, 8);
                
                // Thông báo cập nhật thành công
                JOptionPane.showMessageDialog(null, "Cập nhật thành công!");
            } else {
                JOptionPane.showMessageDialog(null, "Vui lòng chọn một hàng để cập nhật.");
            }
        } catch (Exception ex) {
            Logger.getLogger(ItemGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) throws Exception {//GEN-FIRST:event_btnSearchActionPerformed
        String name = txtName.getText();
        String categoryId = categoryBUS.findByName(cbbCategory.getSelectedItem().toString()).getCategoryId();
        Double costPrice = txtCostPrice.getText().trim().length() != 0 ? Double.parseDouble(txtCostPrice.getText().trim()) : null;
        Integer stockQty = txtStockQty.getText().trim().length() != 0 ? Integer.parseInt(txtStockQty.getText().trim()) : null;
        boolean active = cbStatus.isSelected();
        defaultTableModel.setRowCount(0);
        itemBUS.getItemsWithKeyword(name, categoryId, costPrice, stockQty, active)
                .forEach(i -> {
                    FillOneRow(i);
                });
    }//GEN-LAST:event_btnSearchActionPerformed

    private void lblImgMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblImgMouseClicked
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Chọn ảnh");

        // Đặt thư mục mặc định
        fileChooser.setCurrentDirectory(new File("E:\\Dương Hoàng Huy - 12A2\\HK1_Nam3\\PTUD\\PJ\\RestaurantManagement\\src\\main\\resources\\img\\item"));

        // Chỉ hiển thị các tệp hình ảnh
        fileChooser.setFileFilter(new javax.swing.filechooser.FileNameExtensionFilter("Image files", "jpg", "jpeg", "png", "gif"));

        int result = fileChooser.showOpenDialog(this);

        if (result == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            ImageIcon imageIcon = new ImageIcon(selectedFile.getAbsolutePath());

            // Resize và hiển thị ảnh trên JLabel
            Image image = imageIcon.getImage();
            Image resizedImage = image.getScaledInstance(lblImg.getWidth(), lblImg.getHeight(), Image.SCALE_SMOOTH);
            lblImg.setText("");
            lblImg.setIcon(new ImageIcon(resizedImage));

            try {
                // Đặt đường dẫn đến thư mục đích trong `src/main/resources/img/item`
                Path destinationPath = Path.of("src/main/resources/img/item", selectedFile.getName());

                // Tạo thư mục nếu chưa tồn tại
                Files.createDirectories(destinationPath.getParent());

                // Sao chép tệp ảnh vào thư mục đích, ghi đè nếu đã tồn tại
                Files.copy(selectedFile.toPath(), destinationPath, StandardCopyOption.REPLACE_EXISTING);
                // Lấy tên của ảnh đã sao chép
                this.imgPath = selectedFile.getName();
                System.out.println("Tên ảnh: " + imgPath);

            } catch (Exception e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, "Không thể sao chép ảnh: " + e.getMessage(), "Lỗi", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_lblImgMouseClicked

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) throws Exception {//GEN-FIRST:event_btnAddActionPerformed
        ItemEntity itemEntity;
        if (isValidate()) {
            String name = txtName.getText();
            CategoryEntity category = categoryBUS.findByName(cbbCategory.getSelectedItem().toString());
            double costPrice = Double.parseDouble(txtCostPrice.getText());
            double sellingPrice = Double.parseDouble(txtSellingPrice.getText());
            int stockQty = Integer.parseInt(txtStockQty.getText());
            String desc = txtDesc.getText().trim();
            boolean active = cbStatus.isSelected();

            itemEntity = new ItemEntity(name, costPrice, stockQty, desc, active, category, this.imgPath);
            itemBUS.insertEntity(itemEntity);

            itemEntity = itemBUS.findOneByName(name, cbbCategory.getSelectedItem().toString());

            FillOneRow(itemEntity);
            clear();
            Notifications.getInstance().show(Notifications.Type.SUCCESS, Notifications.Location.TOP_RIGHT, "Thêm sản phẩm " + name + " thành công!");
        }
    }//GEN-LAST:event_btnAddActionPerformed

    private void tableMouseClicked(java.awt.event.MouseEvent evt) throws RemoteException {//GEN-FIRST:event_tableMouseClicked

        int row = table.getSelectedRow(); // Lấy chỉ số hàng đã chọn

        if (row >= 0) { // Kiểm tra xem có hàng nào được chọn không
            // Lấy giá trị từ các cột tương ứng
            String name = table.getValueAt(row, 1).toString(); // Cột tên sản phẩm
            String categoryName = table.getValueAt(row, 2).toString(); // Cột danh mục
            double costPrice = Double.parseDouble(table.getValueAt(row, 3).toString()); // Cột giá nhập
            double sellingPrice = Double.parseDouble(table.getValueAt(row, 4).toString()); // Cột giá bán
            int stockQty = Integer.parseInt(table.getValueAt(row, 5).toString()); // Cột số lượng
            boolean active = table.getValueAt(row, 6).toString().equals("true"); // Cột trạng thái
            String imgPath = table.getValueAt(row, 7).toString(); // Cột tên sản phẩm
            String desc = table.getValueAt(row, 8).toString(); // Cột danh mục

            // Cập nhật các trường tương ứng
            txtName.setText(name);
            cbbCategory.setSelectedItem(categoryName);
            txtCostPrice.setText(String.valueOf(costPrice));
            txtSellingPrice.setText(String.valueOf(sellingPrice));
            txtStockQty.setText(String.valueOf(stockQty));
            cbStatus.setSelected(active);
            lblImg.setText("");
            lblImg.setIcon(ResizeImage.resizeImage(new ImageIcon("src/main/resources/img/item/" + imgPath), 154, 142));
            txtDesc.setText(desc);
        }
        this.i = itemBUS.findOneByName(txtName.getText().trim(), cbbCategory.getSelectedItem().toString());
    }//GEN-LAST:event_tableMouseClicked

    private void txtCostPriceKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCostPriceKeyReleased
        if (txtCostPrice.getText().trim().length() != 0) {
            this.i.setCostPrice(Integer.parseInt(txtCostPrice.getText()));
            this.i.setSellingPrice();
            txtSellingPrice.setText(this.i.getSellingPrice() + "");
        } else {
            txtSellingPrice.setText("0");
        }
    }//GEN-LAST:event_txtCostPriceKeyReleased

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) throws Exception {//GEN-FIRST:event_btnClearActionPerformed
        clear();
        defaultTableModel.setRowCount(0);
        itemBUS.getAllEntities()
                .forEach(i -> {
                    FillOneRow(i);
                });
    }//GEN-LAST:event_btnClearActionPerformed

    private void btnExportActionPerformed(java.awt.event.ActionEvent evt) throws Exception {//GEN-FIRST:event_btnExportActionPerformed
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("HH-mm");
        exportItemsToExcel(itemBUS.getAllEntities(), Constants.REPORT_FILE_PATH + "/items/" + "report_items_" + LocalDateTime.now().format(DatetimeFormatterUtil.getDateFormatter()) + "_" + LocalTime.now().format(formatter) + ".xlsx");
        
        JOptionPane.showMessageDialog(
                        null,
                        "Export thành công ra file: " + "report_items_" + LocalDateTime.now().format(DatetimeFormatterUtil.getDateFormatter()) + "_" + LocalTime.now().format(formatter) + ".xlsx",
                        "<html><b>Thông báo</b></html>",
                        JOptionPane.INFORMATION_MESSAGE
                );
    }//GEN-LAST:event_btnExportActionPerformed

    private void btnImportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImportActionPerformed
        importItemsToExcel().stream().forEach(i -> {
            try {
                itemBUS.insertEntity(i);
            } catch (RemoteException e) {
                throw new RuntimeException(e);
            }
        });
        JOptionPane.showMessageDialog(
                        null,
                        "Import thành công!",
                        "<html><b>Thông báo</b></html>",
                        JOptionPane.INFORMATION_MESSAGE
                );
    }//GEN-LAST:event_btnImportActionPerformed

    public List<ItemEntity> importItemsToExcel() {
        List<ItemEntity> items = new ArrayList<>();

        // Sử dụng JFileChooser để chọn tệp
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Chọn tệp Excel");
        fileChooser.setFileFilter(new javax.swing.filechooser.FileNameExtensionFilter("Excel Files", "xlsx", "xls"));

        // Đặt thư mục mặc định
        File defaultDirectory = new File(Constants.REPORT_FILE_PATH);
        if (!defaultDirectory.exists()) {
            defaultDirectory.mkdirs(); // Tạo thư mục nếu chưa tồn tại
        }
        fileChooser.setCurrentDirectory(defaultDirectory);

        int result = fileChooser.showOpenDialog(null);
        if (result == JFileChooser.APPROVE_OPTION) {
            File excelFile = fileChooser.getSelectedFile();
            try (FileInputStream fis = new FileInputStream(excelFile); XSSFWorkbook workbook = new XSSFWorkbook(fis)) {
                // Lấy sheet đầu tiên
                XSSFSheet sheet = workbook.getSheetAt(0);

                // Duyệt qua các hàng
                Iterator<Row> rowIt = sheet.iterator();
                // Bỏ qua 3 hàng đầu
                for (int i = 0; i < 3 && rowIt.hasNext(); i++) {
                    rowIt.next(); // Bỏ qua hàng
                }

                while (rowIt.hasNext()) {
                    Row row = rowIt.next();
                    // Giả sử các cột trong Excel là: ID, Tên, Danh mục, Giá nhập, Giá bán, Số lượng tồn, Mô tả
//                    String itemId = row.getCell(0).getStringCellValue();
                    String name = row.getCell(1).getStringCellValue();
                    String category = row.getCell(2).getStringCellValue();
                    double costPrice = row.getCell(3).getNumericCellValue();
                    double sellingPrice = row.getCell(4).getNumericCellValue();
                    int stockQuantity = (int) row.getCell(5).getNumericCellValue();
                    String description = row.getCell(6).getStringCellValue();
                    String imgName = row.getCell(7).getStringCellValue();

                    // Tạo đối tượng ItemEntity
                    ItemEntity item = new ItemEntity(name, costPrice, stockQuantity, description, true, categoryBUS.findByName(category), imgName);
                    items.add(item);
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        } else {
            System.out.println("Không có tệp nào được chọn.");
        }

        return items; // Trả về danh sách các ItemEntity
    }

    public void exportItemsToExcel(List<ItemEntity> items, String filePath) {
        // Tạo workbook và sheet
        Workbook workbook = new XSSFWorkbook();
        Sheet sheet = workbook.createSheet("Danh sách sản phẩm");

        // Tạo kiểu chữ đậm và căn giữa cho tiêu đề file
        CellStyle titleStyle = workbook.createCellStyle();
        Font titleFont = workbook.createFont();
        titleFont.setBold(true);
        titleFont.setFontHeightInPoints((short) 22); // Kích thước phông chữ cho tiêu đề
        titleStyle.setFont(titleFont);

        // Căn giữa theo chiều ngang và chiều dọc
        titleStyle.setAlignment(HorizontalAlignment.CENTER);
        titleStyle.setVerticalAlignment(VerticalAlignment.CENTER);

        // Tạo kiểu chữ đậm cho tiêu đề cột
        CellStyle headerStyle = workbook.createCellStyle();
        Font headerFont = workbook.createFont();
        headerFont.setBold(true);
        headerFont.setFontHeightInPoints((short) 16); // Kích thước phông chữ cho tiêu đề cột là 12
        headerStyle.setFont(headerFont);

        // Tạo hàng tiêu đề
        Row titleRow = sheet.createRow(0);
        Cell titleCell = titleRow.createCell(0);
        titleCell.setCellValue("Báo cáo danh sách sản phẩm " + LocalDateTime.now().format(DatetimeFormatterUtil.getDateFormatter()) + " " + LocalTime.now().format(DatetimeFormatterUtil.getTimeFormatter()));
        titleCell.setCellStyle(titleStyle); // Áp dụng kiểu chữ đậm và kích thước 32 cho tiêu đề

        // Gộp ô tiêu đề cho 7 cột
        sheet.addMergedRegion(new CellRangeAddress(0, 0, 0, 7)); // (startRow, endRow, startCol, endCol)

        // Tạo hàng tiêu đề cột
        Row headerRow = sheet.createRow(2); // Bỏ qua hàng 1 để có không gian cho tiêu đề
        headerRow.createCell(0).setCellValue("ID");
        headerRow.createCell(1).setCellValue("Tên");
        headerRow.createCell(2).setCellValue("Danh mục");
        headerRow.createCell(3).setCellValue("Giá nhập");
        headerRow.createCell(4).setCellValue("Giá bán");
        headerRow.createCell(5).setCellValue("Số lượng tồn");
        headerRow.createCell(6).setCellValue("Mô tả");
        headerRow.createCell(7).setCellValue("Hình ảnh");

        // Áp dụng kiểu chữ đậm cho các tên cột
        for (int i = 0; i < 8; i++) {
            headerRow.getCell(i).setCellStyle(headerStyle);
        }

        // Ghi dữ liệu vào các hàng tiếp theo
        int rowIndex = 3; // Bắt đầu từ hàng thứ 3 (sau tiêu đề và tiêu đề cột)
        for (ItemEntity item : items) {
            Row row = sheet.createRow(rowIndex++);
            row.createCell(0).setCellValue(item.getItemId());
            row.createCell(1).setCellValue(item.getName());
            row.createCell(2).setCellValue(item.getCategory().getName());
            row.createCell(3).setCellValue(item.getCostPrice());
            row.createCell(4).setCellValue(item.getSellingPrice());
            row.createCell(5).setCellValue(item.getStockQuantity());
            row.createCell(6).setCellValue(item.getDescription());
            row.createCell(7).setCellValue(item.getImg());
        }

        // Điều chỉnh độ rộng cột
        for (int i = 0; i < 8; i++) {
            sheet.autoSizeColumn(i);
        }

        // Ghi workbook vào file
        try (FileOutputStream fileOut = new FileOutputStream(filePath)) {
            workbook.write(fileOut);
            System.out.println("Xuất dữ liệu ra tệp Excel thành công: " + filePath);
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            try {
                workbook.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }

        // Mở file ngay sau khi lưu
//        try {
//            File file = new File(filePath);
//            if (Desktop.isDesktopSupported()) {
//                Desktop.getDesktop().open(file);
//            } else {
//                System.out.println("Desktop không được hỗ trợ trên hệ thống này.");
//            }
//        } catch (IOException e) {
//            e.printStackTrace();
//            System.out.println("Không thể mở tệp Excel.");
//        }
    }

    private boolean isValidate() {
        return true;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private gui.custom.RoundedButton btnAdd;
    private gui.custom.RoundedButton btnClear;
    private gui.custom.RoundedButton btnExport;
    private gui.custom.RoundedButton btnImport;
    private gui.custom.RoundedButton btnSearch;
    private gui.custom.RoundedButton btnUpdate;
    private javax.swing.JCheckBox cbStatus;
    private gui.custom.RoundedComboBox cbbCategory;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblImg;
    private gui.custom.RoundedPanel panelImg;
    private javax.swing.JTable table;
    private gui.custom.RoundedTextField txtCostPrice;
    private gui.custom.RoundedTextArea txtDesc;
    private gui.custom.RoundedTextField txtName;
    private gui.custom.RoundedTextField txtSellingPrice;
    private gui.custom.RoundedTextField txtStockQty;
    // End of variables declaration//GEN-END:variables
}
