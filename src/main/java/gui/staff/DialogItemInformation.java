/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package gui.staff;

import bus.ItemToppingBUS;
import bus.impl.ItemToppingBUSImpl;
import common.Constants;
import dto.ItemCartDTO;
import model.ItemEntity;
import model.ItemToppingEntity;
import gui.FormLoad;
import gui.custom.JRadioButtonCustom;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;
import javax.swing.*;
import raven.toast.Notifications;

import util.*;

/**
 *
 * @author Trần Ngọc Huyền
 */
public class DialogItemInformation extends JDialog {

    /**
     * Creates new form DialogItemInformation
     */
    private ItemEntity item;
    private ItemToppingEntity itemTopping;
    private OrderGUI orderGUI;
    private ItemToppingBUS itemToppingBUS;

    public DialogItemInformation(ItemEntity item, ItemToppingEntity itemTopping, OrderGUI orderGUI) {
        super(new JFrame(), true);
        this.itemTopping = itemTopping;
        this.item = item;
        this.orderGUI = orderGUI;
        itemToppingBUS = FormLoad.itemToppingBUS;
        initComponents();
        fillContent();
        ReloadComponentUlti.reload(this);
        this.setResizable(true);
        this.setLocationRelativeTo(null);

        // Cấu hình KeyBinding để nhấn Enter đóng dialog
        this.getRootPane().getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW)
                .put(KeyStroke.getKeyStroke("ENTER"), "action");
        this.getRootPane().getActionMap().put("action", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                try {
                    confirmAddingItem();
                } catch (Exception ex) {
                    throw new RuntimeException(ex);
                }
            }
        });
    }

    public ItemToppingEntity getItemTopping() {
        return itemTopping;
    }

    public void setItemTopping(ItemToppingEntity itemTopping) {
        this.itemTopping = itemTopping;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnGroup = new ButtonGroup();
        panelWrapper = new JPanel();
        panelHead = new JPanel();
        lblTitle = new JLabel();
        panelBody = new JPanel();
        jPanel1 = new JPanel();
        lblImg = new JLabel();
        lblPrice = new JLabel();
        jPanel2 = new JPanel();
        roundedPanel1 = new gui.custom.RoundedPanel();
        roundedPanel2 = new gui.custom.RoundedPanel();
        lblName = new JLabel();
        lblDesc = new JLabel();
        lblSizeCrust = new JLabel();
        roundedButton1 = new gui.custom.RoundedButton();
        roundedPanel5 = new gui.custom.RoundedPanel();
        pnTopping = new gui.custom.RoundedPanel();
        jPanel3 = new JPanel();
        jPanel4 = new JPanel();
        lbl = new JLabel();
        pnCrusts = new JPanel();
        roundedPanel9 = new gui.custom.RoundedPanel();
        roundedPanel10 = new gui.custom.RoundedPanel();
        jPanel5 = new JPanel();
        pnSize = new gui.custom.RoundedPanel();
        jPanel7 = new JPanel();
        jPanel6 = new JPanel();
        roundedPanel3 = new gui.custom.RoundedPanel();
        lbl2 = new JLabel();
        jPanel8 = new JPanel();
        qtySpinner = new JSpinner(new SpinnerNumberModel(1, 1, null, 1));

        setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
        setPreferredSize(new Dimension(800, 250));
        setSize(new Dimension(0, 0));

        panelWrapper.setBackground(new java.awt.Color(255, 255, 255));
        panelWrapper.setPreferredSize(new Dimension(800, 250));
        panelWrapper.setLayout(new java.awt.BorderLayout());

        panelHead.setBackground(Constants.COLOR_PRIMARY);
        panelHead.setPreferredSize(new Dimension(600, 39));
        panelHead.setLayout(new java.awt.BorderLayout());

        lblTitle.setBackground(Constants.COLOR_PRIMARY);
        lblTitle.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        lblTitle.setForeground(new java.awt.Color(255, 255, 255));
        lblTitle.setHorizontalAlignment(SwingConstants.CENTER);
        lblTitle.setText("Thêm sản phẩm");
        lblTitle.setToolTipText("");
        panelHead.add(lblTitle, java.awt.BorderLayout.CENTER);

        panelWrapper.add(panelHead, java.awt.BorderLayout.NORTH);

        panelBody.setPreferredSize(new Dimension(750, 250));
        panelBody.setLayout(new java.awt.GridLayout(1, 0));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        lblPrice.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        lblPrice.setHorizontalAlignment(SwingConstants.CENTER);
        lblPrice.setText("jLabel2");

        GroupLayout jPanel1Layout = new GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addComponent(lblImg, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblPrice, GroupLayout.DEFAULT_SIZE, 388, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(lblImg, GroupLayout.DEFAULT_SIZE, 211, Short.MAX_VALUE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblPrice, GroupLayout.PREFERRED_SIZE, 60, GroupLayout.PREFERRED_SIZE))
        );

        panelBody.add(jPanel1);

        jPanel2.setBackground(Constants.COLOR_BG);
        jPanel2.setOpaque(false);
        jPanel2.setPreferredSize(new Dimension(400, 333));
        jPanel2.setLayout(new java.awt.BorderLayout());

        roundedPanel1.setBackground(Constants.COLOR_BG);
        roundedPanel1.setPreferredSize(new Dimension(424, 333));
        roundedPanel1.setLayout(new java.awt.BorderLayout());

        roundedPanel2.setBackground(Constants.COLOR_BG);
        roundedPanel2.setBorder(BorderFactory.createMatteBorder(0, 0, 1, 0, Constants.COLOR_BORDER));

        lblName.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        lblName.setText("N - Pizza Aloha");

        lblSizeCrust.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        lblSizeCrust.setForeground(Constants.COLOR_PRIMARY);

        GroupLayout roundedPanel2Layout = new GroupLayout(roundedPanel2);
        roundedPanel2.setLayout(roundedPanel2Layout);
        roundedPanel2Layout.setHorizontalGroup(
            roundedPanel2Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(roundedPanel2Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(roundedPanel2Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(lblSizeCrust, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblName, GroupLayout.DEFAULT_SIZE, 378, Short.MAX_VALUE)
                    .addComponent(lblDesc, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        roundedPanel2Layout.setVerticalGroup(
            roundedPanel2Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(roundedPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblName, GroupLayout.PREFERRED_SIZE, 29, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblSizeCrust, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblDesc)
                .addGap(10, 10, 10))
        );

        roundedPanel1.add(roundedPanel2, java.awt.BorderLayout.NORTH);

        roundedButton1.setBackground(Constants.COLOR_PRIMARY);
        roundedButton1.setForeground(new java.awt.Color(255, 255, 255));
        roundedButton1.setText("Thêm");
        roundedButton1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        roundedButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                try {
                    roundedButton1ActionPerformed(evt);
                } catch (Exception e) {
                    throw new RuntimeException(e);
                }
            }
        });
        roundedPanel1.add(roundedButton1, java.awt.BorderLayout.SOUTH);

        roundedPanel5.setMaximumSize(new Dimension(2147483647, 100));
        roundedPanel5.setMinimumSize(new Dimension(0, 0));
        roundedPanel5.setPreferredSize(new Dimension(418, 0));
        roundedPanel5.setLayout(new java.awt.BorderLayout());

        pnTopping.setBackground(Constants.COLOR_BG);
        pnTopping.setBorder(BorderFactory.createMatteBorder(0, 0, 1, 0, Constants.COLOR_BORDER));
        pnTopping.setMaximumSize(new Dimension(32767, 100));
        pnTopping.setLayout(new BoxLayout(pnTopping, BoxLayout.LINE_AXIS));

        jPanel3.setBackground(Constants.COLOR_BG);
        jPanel3.setMaximumSize(new Dimension(16, 81));
        jPanel3.setPreferredSize(new Dimension(16, 81));

        GroupLayout jPanel3Layout = new GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGap(0, 80, Short.MAX_VALUE)
        );

        pnTopping.add(jPanel3);

        jPanel4.setBackground(Constants.COLOR_BG);
        jPanel4.setLayout(new java.awt.BorderLayout());

        lbl.setFont(new java.awt.Font("Segoe UI", 1, 20)); // NOI18N
        lbl.setForeground(Constants.COLOR_PRIMARY);
        lbl.setText("Đế");
        jPanel4.add(lbl, java.awt.BorderLayout.NORTH);

        pnCrusts.setBackground(Constants.COLOR_BG);
        pnCrusts.setMaximumSize(new Dimension(400, 100));
        pnCrusts.setLayout(new BoxLayout(pnCrusts, BoxLayout.Y_AXIS));
        jPanel4.add(pnCrusts, java.awt.BorderLayout.CENTER);

        roundedPanel9.setBackground(Constants.COLOR_BG);
        roundedPanel9.setPreferredSize(new Dimension(0, 10));

        GroupLayout roundedPanel9Layout = new GroupLayout(roundedPanel9);
        roundedPanel9.setLayout(roundedPanel9Layout);
        roundedPanel9Layout.setHorizontalGroup(
            roundedPanel9Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        roundedPanel9Layout.setVerticalGroup(
            roundedPanel9Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGap(0, 10, Short.MAX_VALUE)
        );

        jPanel4.add(roundedPanel9, java.awt.BorderLayout.SOUTH);

        pnTopping.add(jPanel4);

        roundedPanel5.add(pnTopping, java.awt.BorderLayout.NORTH);

        roundedPanel10.setBackground(Constants.COLOR_BG);
        roundedPanel10.setBorder(BorderFactory.createMatteBorder(0, 0, 1, 0, Constants.COLOR_BORDER));
        roundedPanel10.setMaximumSize(new Dimension(2147483647, 100));
        roundedPanel10.setMinimumSize(new Dimension(0, 0));
        roundedPanel10.setPreferredSize(new Dimension(418, 0));
        roundedPanel10.setLayout(new java.awt.BorderLayout());

        jPanel5.setBackground(Constants.COLOR_BG);
        jPanel5.setPreferredSize(new Dimension(16, 16));

        GroupLayout jPanel5Layout = new GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGap(0, 16, Short.MAX_VALUE)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGap(0, 83, Short.MAX_VALUE)
        );

        roundedPanel10.add(jPanel5, java.awt.BorderLayout.WEST);

        pnSize.setBackground(Constants.COLOR_BG);
        pnSize.setMaximumSize(new Dimension(32767, 100));
        pnSize.setLayout(new java.awt.BorderLayout());

        jPanel7.setBackground(Constants.COLOR_BG);

        GroupLayout jPanel7Layout = new GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        pnSize.add(jPanel7, java.awt.BorderLayout.CENTER);

        jPanel6.setBackground(Constants.COLOR_BG);
        jPanel6.setPreferredSize(new Dimension(300, 80));
        jPanel6.setLayout(new java.awt.BorderLayout());

        roundedPanel3.setBackground(Constants.COLOR_BG);
        roundedPanel3.setLayout(new java.awt.BorderLayout());

        lbl2.setFont(new java.awt.Font("Segoe UI", 1, 20)); // NOI18N
        lbl2.setForeground(Constants.COLOR_PRIMARY);
        lbl2.setText("Số lượng");
        roundedPanel3.add(lbl2, java.awt.BorderLayout.NORTH);

        jPanel8.setBackground(Constants.COLOR_BG);
        jPanel8.setPreferredSize(new Dimension(10, 10));

        GroupLayout jPanel8Layout = new GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGap(0, 382, Short.MAX_VALUE)
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGap(0, 10, Short.MAX_VALUE)
        );

        roundedPanel3.add(jPanel8, java.awt.BorderLayout.CENTER);

        jPanel6.add(roundedPanel3, java.awt.BorderLayout.NORTH);

        qtySpinner.setFont(new java.awt.Font("Segoe UI", 0, 20)); // NOI18N
        qtySpinner.setPreferredSize(new Dimension(100, 40));
        qtySpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                qtySpinnerStateChanged(evt);
            }
        });
        qtySpinner.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                qtySpinnerFocusLost(evt);
            }
        });
        qtySpinner.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                qtySpinnerMouseClicked(evt);
            }
        });
        jPanel6.add(qtySpinner, java.awt.BorderLayout.LINE_START);

        pnSize.add(jPanel6, java.awt.BorderLayout.NORTH);

        roundedPanel10.add(pnSize, java.awt.BorderLayout.CENTER);

        roundedPanel5.add(roundedPanel10, java.awt.BorderLayout.CENTER);

        roundedPanel1.add(roundedPanel5, java.awt.BorderLayout.CENTER);

        jPanel2.add(roundedPanel1, java.awt.BorderLayout.CENTER);

        panelBody.add(jPanel2);

        panelWrapper.add(panelBody, java.awt.BorderLayout.CENTER);

        getContentPane().add(panelWrapper, java.awt.BorderLayout.CENTER);

        setSize(new Dimension(816, 324));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void roundedButton1ActionPerformed(ActionEvent evt) throws Exception {//GEN-FIRST:event_roundedButton1ActionPerformed
//        ItemCartDTO itemCartDTO = new ItemCartDTO(item, itemTopping, txtDes.getText());
//        orderGUI.cartDTO.insert(itemCartDTO);
//        PanelOrderDetail pnOD = new PanelOrderDetail(itemCartDTO, orderGUI);
//        orderGUI.addPanelOrderDetail(pnOD);
//        this.setVisible(false);
        if (checkQtyStock()) {
            confirmAddingItem();
        }
    }//GEN-LAST:event_roundedButton1ActionPerformed

    private void qtySpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_qtySpinnerStateChanged
        checkQtyStock();
    }//GEN-LAST:event_qtySpinnerStateChanged

    private void qtySpinnerMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_qtySpinnerMouseClicked
    }//GEN-LAST:event_qtySpinnerMouseClicked

    private void qtySpinnerFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_qtySpinnerFocusLost
        checkQtyStock();
    }//GEN-LAST:event_qtySpinnerFocusLost
    private boolean checkQtyStock() {
        ItemCartDTO itemCartDTO = new ItemCartDTO(item, itemTopping, "");
        int value = (Integer) qtySpinner.getValue();
        if (value + orderGUI.cartDTO.getItemQty(itemCartDTO) > item.getStockQuantity()) {
            Notifications.getInstance().show(
                    Notifications.Type.ERROR,
                    Notifications.Location.TOP_RIGHT,
                    10000,
                    "Không đủ số lượng tồn kho!"
            );
            return false;
        }
        return true;
    }

    private void confirmAddingItem() throws Exception {
        ItemCartDTO itemCartDTO = new ItemCartDTO(item, itemTopping, "");
        int oldQtyInCart = orderGUI.cartDTO.getItemQty(itemCartDTO);
        orderGUI.cartDTO.insert(itemCartDTO);
//        orderGUI.cartDTO.findItem(itemCartDTO).setDescription(txtDesc.getText());
        orderGUI.cartDTO.updateQty(itemCartDTO, (Integer) qtySpinner.getValue() + oldQtyInCart);
        PanelOrderDetail pnOD = new PanelOrderDetail(itemCartDTO, orderGUI);
        orderGUI.addPanelOrderDetail(pnOD);
        this.setVisible(false);
    }


    private void fillContent() {
        lblName.setText(item.getName());

        if (item.getDescription() != null) {
            lblDesc.setText(item.getDescription());
        }
        //Toppings
        int size = 0;
        Set<ItemToppingEntity> itemToppingsTmp = item.getItemToppings();
        List<ItemToppingEntity> itemToppings = itemToppingsTmp.stream().collect(Collectors.toList());
        if (itemToppings.size() == 1 && itemToppings.get(0).getTopping().getName().equals("DEFAULT_TOPPING")) {
            loadPrice(item, null);
            pnTopping.removeAll();
            ReloadComponentUlti.reload(pnTopping);
            this.remove(pnTopping);
            lblImg.setIcon(ResizeImage.resizeImage(new ImageIcon(getClass().getResource("/img/item/" + item.getImg())),
                this.getWidth() / 2,
                100));
            this.setSize(new Dimension(this.getWidth(), this.getHeight()));
            pnSize.setSize(new Dimension(this.getWidth(), this.getHeight() - 100));
        } else {
            lblImg.setIcon(ResizeImage.resizeImage(new ImageIcon(getClass().getResource("/img/item/" + item.getImg())),
                this.getWidth() / 2,
                200));
            for (ItemToppingEntity it : itemToppings) {
                if (itemToppings.size() == 1) {
                    size = 50;
                }
                String initialText = it.getTopping().getName();
                JRadioButtonCustom r = createRadio(initialText, it);
                btnGroup.add(r);

                if (btnGroup.getButtonCount() == 1) {
                    r.setSelected(true);
                    SwingUtilities.invokeLater(() -> r.doClick());
                }
                size += 55;
                radioActionPerform(r, initialText, it);
                r.setActionCommand(initialText);
            }
            this.setSize(new Dimension(this.getWidth(), this.getHeight() + size));
        }
    }

    private void loadPrice(ItemEntity item, ItemToppingEntity itemTopping) {
        double sellingPrice = item.getSellingPrice() * (1 - item.getTopDiscountPercentage());
        double toppingPrice = 0;
        if (itemTopping != null) {
            toppingPrice = itemTopping.getSellingPrice();
        }
        double price = sellingPrice + toppingPrice;
        if (item.getTopDiscountPercentage() > 0) {
            lblPrice.setText("<html><body style = 'text-align: center'>"
                    + "<s style='color: rgba(0, 0, 0, 0.5); font-size: 14px; font-weight:0'>"
                    + DoubleFormatUlti.format(item.getSellingPrice() + toppingPrice)
                    + "</s> <div style='color: #0A72B9; font-size: 20px; font-weight: 500'>"
                    + DoubleFormatUlti.format(price)
                    + "</div></body></html>");
        } else {
            lblPrice.setText(DoubleFormatUlti.format(price));
        }
    }

    private void radioActionPerform(JRadioButton r, String initialText, ItemToppingEntity it) {
        r.addActionListener((ActionEvent e) -> {
            for (int i = 0; i < pnCrusts.getComponentCount(); i++) {
                if (pnCrusts.getComponent(i) instanceof JRadioButtonCustom) {
                    JRadioButtonCustom rb = (JRadioButtonCustom) pnCrusts.getComponent(i);
                    if (rb == r) {
                        if (it.getSellingPrice() != 0) {
                            String updatedText = "<html>" + it.getTopping().getName();
                            updatedText += " <span style='color:#0A72B9, font-weight: 400;'>+" + DoubleFormatUlti.format(it.getSellingPrice()) + "đ</span>";
                            updatedText += "</html>";
                            rb.setText(updatedText);
                        }
                    } else {
                        rb.setText(rb.getActionCommand());
                    }
                }
            }
            if (it.getItem().getSize().getSize() != null) {
                lblSizeCrust.setText("Kích thước " + it.getItem().getSize().getSize() + " - Đế " + initialText);
            }
            this.itemTopping = it;
            loadPrice(this.item, it);
        });
    }

    private JRadioButtonCustom createRadio(String text, ItemToppingEntity itemTopping) {
        JRadioButtonCustom r = new JRadioButtonCustom(text, itemTopping);
        r.setPreferredSize(new Dimension(20, 30));
        r.setOpaque(false);
        pnCrusts.add(r);
        pnCrusts.add(Box.createRigidArea(new Dimension(0, 10)));
        r.setPreferredSize(new Dimension(20, 30));
        return r;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private ButtonGroup btnGroup;
    private JPanel jPanel1;
    private JPanel jPanel2;
    private JPanel jPanel3;
    private JPanel jPanel4;
    private JPanel jPanel5;
    private JPanel jPanel6;
    private JPanel jPanel7;
    private JPanel jPanel8;
    private JLabel lbl;
    private JLabel lbl2;
    private JLabel lblDesc;
    private JLabel lblImg;
    private JLabel lblName;
    private JLabel lblPrice;
    private JLabel lblSizeCrust;
    private JLabel lblTitle;
    private JPanel panelBody;
    private JPanel panelHead;
    private JPanel panelWrapper;
    private JPanel pnCrusts;
    private gui.custom.RoundedPanel pnSize;
    private gui.custom.RoundedPanel pnTopping;
    private JSpinner qtySpinner;
    private gui.custom.RoundedButton roundedButton1;
    private gui.custom.RoundedPanel roundedPanel1;
    private gui.custom.RoundedPanel roundedPanel10;
    private gui.custom.RoundedPanel roundedPanel2;
    private gui.custom.RoundedPanel roundedPanel3;
    private gui.custom.RoundedPanel roundedPanel5;
    private gui.custom.RoundedPanel roundedPanel9;
    // End of variables declaration//GEN-END:variables
}
